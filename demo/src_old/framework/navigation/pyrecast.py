# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyrecast', [dirname(__file__)])
        except ImportError:
            import _pyrecast
            return _pyrecast
        if fp is not None:
            try:
                _mod = imp.load_module('_pyrecast', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyrecast = swig_import_helper()
    del swig_import_helper
else:
    import _pyrecast
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def dtStatusSucceed(*args):
  return _pyrecast.dtStatusSucceed(*args)
dtStatusSucceed = _pyrecast.dtStatusSucceed

def dtStatusFailed(*args):
  return _pyrecast.dtStatusFailed(*args)
dtStatusFailed = _pyrecast.dtStatusFailed

def dtStatusInProgress(*args):
  return _pyrecast.dtStatusInProgress(*args)
dtStatusInProgress = _pyrecast.dtStatusInProgress

def dtStatusDetail(*args):
  return _pyrecast.dtStatusDetail(*args)
dtStatusDetail = _pyrecast.dtStatusDetail
DT_ALLOC_PERM = _pyrecast.DT_ALLOC_PERM
DT_ALLOC_TEMP = _pyrecast.DT_ALLOC_TEMP

def dtAllocSetCustom(*args):
  return _pyrecast.dtAllocSetCustom(*args)
dtAllocSetCustom = _pyrecast.dtAllocSetCustom

def dtAlloc(*args):
  return _pyrecast.dtAlloc(*args)
dtAlloc = _pyrecast.dtAlloc

def dtFree(*args):
  return _pyrecast.dtFree(*args)
dtFree = _pyrecast.dtFree

def dtPoint3(*args):
  return _pyrecast.dtPoint3(*args)
dtPoint3 = _pyrecast.dtPoint3

def dtSqrt(*args):
  return _pyrecast.dtSqrt(*args)
dtSqrt = _pyrecast.dtSqrt

def dtVcross(*args):
  return _pyrecast.dtVcross(*args)
dtVcross = _pyrecast.dtVcross

def dtVdot(*args):
  return _pyrecast.dtVdot(*args)
dtVdot = _pyrecast.dtVdot

def dtVmad(*args):
  return _pyrecast.dtVmad(*args)
dtVmad = _pyrecast.dtVmad

def dtVlerp(*args):
  return _pyrecast.dtVlerp(*args)
dtVlerp = _pyrecast.dtVlerp

def dtVadd(*args):
  return _pyrecast.dtVadd(*args)
dtVadd = _pyrecast.dtVadd

def dtVsub(*args):
  return _pyrecast.dtVsub(*args)
dtVsub = _pyrecast.dtVsub

def dtVscale(*args):
  return _pyrecast.dtVscale(*args)
dtVscale = _pyrecast.dtVscale

def dtVmin(*args):
  return _pyrecast.dtVmin(*args)
dtVmin = _pyrecast.dtVmin

def dtVmax(*args):
  return _pyrecast.dtVmax(*args)
dtVmax = _pyrecast.dtVmax

def dtVset(*args):
  return _pyrecast.dtVset(*args)
dtVset = _pyrecast.dtVset

def dtVcopy(*args):
  return _pyrecast.dtVcopy(*args)
dtVcopy = _pyrecast.dtVcopy

def dtVlen(*args):
  return _pyrecast.dtVlen(*args)
dtVlen = _pyrecast.dtVlen

def dtVlenSqr(*args):
  return _pyrecast.dtVlenSqr(*args)
dtVlenSqr = _pyrecast.dtVlenSqr

def dtVdist(*args):
  return _pyrecast.dtVdist(*args)
dtVdist = _pyrecast.dtVdist

def dtVdistSqr(*args):
  return _pyrecast.dtVdistSqr(*args)
dtVdistSqr = _pyrecast.dtVdistSqr

def dtVdist2D(*args):
  return _pyrecast.dtVdist2D(*args)
dtVdist2D = _pyrecast.dtVdist2D

def dtVdist2DSqr(*args):
  return _pyrecast.dtVdist2DSqr(*args)
dtVdist2DSqr = _pyrecast.dtVdist2DSqr

def dtVnormalize(*args):
  return _pyrecast.dtVnormalize(*args)
dtVnormalize = _pyrecast.dtVnormalize

def dtVequal(*args):
  return _pyrecast.dtVequal(*args)
dtVequal = _pyrecast.dtVequal

def dtVdot2D(*args):
  return _pyrecast.dtVdot2D(*args)
dtVdot2D = _pyrecast.dtVdot2D

def dtVperp2D(*args):
  return _pyrecast.dtVperp2D(*args)
dtVperp2D = _pyrecast.dtVperp2D

def dtTriArea2D(*args):
  return _pyrecast.dtTriArea2D(*args)
dtTriArea2D = _pyrecast.dtTriArea2D

def dtOverlapQuantBounds(*args):
  return _pyrecast.dtOverlapQuantBounds(*args)
dtOverlapQuantBounds = _pyrecast.dtOverlapQuantBounds

def dtOverlapBounds(*args):
  return _pyrecast.dtOverlapBounds(*args)
dtOverlapBounds = _pyrecast.dtOverlapBounds

def dtClosestPtPointTriangle(*args):
  return _pyrecast.dtClosestPtPointTriangle(*args)
dtClosestPtPointTriangle = _pyrecast.dtClosestPtPointTriangle

def dtClosestHeightPointTriangle(*args):
  return _pyrecast.dtClosestHeightPointTriangle(*args)
dtClosestHeightPointTriangle = _pyrecast.dtClosestHeightPointTriangle

def dtIntersectSegmentPoly2D(*args):
  return _pyrecast.dtIntersectSegmentPoly2D(*args)
dtIntersectSegmentPoly2D = _pyrecast.dtIntersectSegmentPoly2D

def dtIntersectSegSeg2D(*args):
  return _pyrecast.dtIntersectSegSeg2D(*args)
dtIntersectSegSeg2D = _pyrecast.dtIntersectSegSeg2D

def dtPointInPolygon(*args):
  return _pyrecast.dtPointInPolygon(*args)
dtPointInPolygon = _pyrecast.dtPointInPolygon

def dtDistancePtPolyEdgesSqr(*args):
  return _pyrecast.dtDistancePtPolyEdgesSqr(*args)
dtDistancePtPolyEdgesSqr = _pyrecast.dtDistancePtPolyEdgesSqr

def dtDistancePtSegSqr2D(*args):
  return _pyrecast.dtDistancePtSegSqr2D(*args)
dtDistancePtSegSqr2D = _pyrecast.dtDistancePtSegSqr2D

def dtCalcPolyCenter(*args):
  return _pyrecast.dtCalcPolyCenter(*args)
dtCalcPolyCenter = _pyrecast.dtCalcPolyCenter

def dtOverlapPolyPoly2D(*args):
  return _pyrecast.dtOverlapPolyPoly2D(*args)
dtOverlapPolyPoly2D = _pyrecast.dtOverlapPolyPoly2D

def dtNextPow2(*args):
  return _pyrecast.dtNextPow2(*args)
dtNextPow2 = _pyrecast.dtNextPow2

def dtIlog2(*args):
  return _pyrecast.dtIlog2(*args)
dtIlog2 = _pyrecast.dtIlog2

def dtAlign4(*args):
  return _pyrecast.dtAlign4(*args)
dtAlign4 = _pyrecast.dtAlign4

def dtOppositeTile(*args):
  return _pyrecast.dtOppositeTile(*args)
dtOppositeTile = _pyrecast.dtOppositeTile

def dtSwapByte(*args):
  return _pyrecast.dtSwapByte(*args)
dtSwapByte = _pyrecast.dtSwapByte

def dtSwapEndian(*args):
  return _pyrecast.dtSwapEndian(*args)
dtSwapEndian = _pyrecast.dtSwapEndian

def dtRandomPointInConvexPoly(*args):
  return _pyrecast.dtRandomPointInConvexPoly(*args)
dtRandomPointInConvexPoly = _pyrecast.dtRandomPointInConvexPoly
DT_TILE_FREE_DATA = _pyrecast.DT_TILE_FREE_DATA
DT_STRAIGHTPATH_START = _pyrecast.DT_STRAIGHTPATH_START
DT_STRAIGHTPATH_END = _pyrecast.DT_STRAIGHTPATH_END
DT_STRAIGHTPATH_OFFMESH_CONNECTION = _pyrecast.DT_STRAIGHTPATH_OFFMESH_CONNECTION
DT_STRAIGHTPATH_AREA_CROSSINGS = _pyrecast.DT_STRAIGHTPATH_AREA_CROSSINGS
DT_STRAIGHTPATH_ALL_CROSSINGS = _pyrecast.DT_STRAIGHTPATH_ALL_CROSSINGS
DT_POLYTYPE_GROUND = _pyrecast.DT_POLYTYPE_GROUND
DT_POLYTYPE_OFFMESH_CONNECTION = _pyrecast.DT_POLYTYPE_OFFMESH_CONNECTION
class dtPoly(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtPoly, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtPoly, name)
    __repr__ = _swig_repr
    __swig_setmethods__["firstLink"] = _pyrecast.dtPoly_firstLink_set
    __swig_getmethods__["firstLink"] = _pyrecast.dtPoly_firstLink_get
    if _newclass:firstLink = _swig_property(_pyrecast.dtPoly_firstLink_get, _pyrecast.dtPoly_firstLink_set)
    __swig_setmethods__["verts"] = _pyrecast.dtPoly_verts_set
    __swig_getmethods__["verts"] = _pyrecast.dtPoly_verts_get
    if _newclass:verts = _swig_property(_pyrecast.dtPoly_verts_get, _pyrecast.dtPoly_verts_set)
    __swig_setmethods__["neis"] = _pyrecast.dtPoly_neis_set
    __swig_getmethods__["neis"] = _pyrecast.dtPoly_neis_get
    if _newclass:neis = _swig_property(_pyrecast.dtPoly_neis_get, _pyrecast.dtPoly_neis_set)
    __swig_setmethods__["flags"] = _pyrecast.dtPoly_flags_set
    __swig_getmethods__["flags"] = _pyrecast.dtPoly_flags_get
    if _newclass:flags = _swig_property(_pyrecast.dtPoly_flags_get, _pyrecast.dtPoly_flags_set)
    __swig_setmethods__["vertCount"] = _pyrecast.dtPoly_vertCount_set
    __swig_getmethods__["vertCount"] = _pyrecast.dtPoly_vertCount_get
    if _newclass:vertCount = _swig_property(_pyrecast.dtPoly_vertCount_get, _pyrecast.dtPoly_vertCount_set)
    __swig_setmethods__["areaAndtype"] = _pyrecast.dtPoly_areaAndtype_set
    __swig_getmethods__["areaAndtype"] = _pyrecast.dtPoly_areaAndtype_get
    if _newclass:areaAndtype = _swig_property(_pyrecast.dtPoly_areaAndtype_get, _pyrecast.dtPoly_areaAndtype_set)
    def setArea(self, *args): return _pyrecast.dtPoly_setArea(self, *args)
    def setType(self, *args): return _pyrecast.dtPoly_setType(self, *args)
    def getArea(self): return _pyrecast.dtPoly_getArea(self)
    def getType(self): return _pyrecast.dtPoly_getType(self)
    def __init__(self): 
        this = _pyrecast.new_dtPoly()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtPoly
    __del__ = lambda self : None;
dtPoly_swigregister = _pyrecast.dtPoly_swigregister
dtPoly_swigregister(dtPoly)
cvar = _pyrecast.cvar
DT_FAILURE = cvar.DT_FAILURE
DT_SUCCESS = cvar.DT_SUCCESS
DT_IN_PROGRESS = cvar.DT_IN_PROGRESS
DT_STATUS_DETAIL_MASK = cvar.DT_STATUS_DETAIL_MASK
DT_WRONG_MAGIC = cvar.DT_WRONG_MAGIC
DT_WRONG_VERSION = cvar.DT_WRONG_VERSION
DT_OUT_OF_MEMORY = cvar.DT_OUT_OF_MEMORY
DT_INVALID_PARAM = cvar.DT_INVALID_PARAM
DT_BUFFER_TOO_SMALL = cvar.DT_BUFFER_TOO_SMALL
DT_OUT_OF_NODES = cvar.DT_OUT_OF_NODES
DT_PARTIAL_RESULT = cvar.DT_PARTIAL_RESULT
DT_VERTS_PER_POLYGON = cvar.DT_VERTS_PER_POLYGON
DT_NAVMESH_MAGIC = cvar.DT_NAVMESH_MAGIC
DT_NAVMESH_VERSION = cvar.DT_NAVMESH_VERSION
DT_NAVMESH_STATE_MAGIC = cvar.DT_NAVMESH_STATE_MAGIC
DT_NAVMESH_STATE_VERSION = cvar.DT_NAVMESH_STATE_VERSION
DT_EXT_LINK = cvar.DT_EXT_LINK
DT_NULL_LINK = cvar.DT_NULL_LINK
DT_OFFMESH_CON_BIDIR = cvar.DT_OFFMESH_CON_BIDIR
DT_MAX_AREAS = cvar.DT_MAX_AREAS

class dtPolyDetail(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtPolyDetail, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtPolyDetail, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vertBase"] = _pyrecast.dtPolyDetail_vertBase_set
    __swig_getmethods__["vertBase"] = _pyrecast.dtPolyDetail_vertBase_get
    if _newclass:vertBase = _swig_property(_pyrecast.dtPolyDetail_vertBase_get, _pyrecast.dtPolyDetail_vertBase_set)
    __swig_setmethods__["triBase"] = _pyrecast.dtPolyDetail_triBase_set
    __swig_getmethods__["triBase"] = _pyrecast.dtPolyDetail_triBase_get
    if _newclass:triBase = _swig_property(_pyrecast.dtPolyDetail_triBase_get, _pyrecast.dtPolyDetail_triBase_set)
    __swig_setmethods__["vertCount"] = _pyrecast.dtPolyDetail_vertCount_set
    __swig_getmethods__["vertCount"] = _pyrecast.dtPolyDetail_vertCount_get
    if _newclass:vertCount = _swig_property(_pyrecast.dtPolyDetail_vertCount_get, _pyrecast.dtPolyDetail_vertCount_set)
    __swig_setmethods__["triCount"] = _pyrecast.dtPolyDetail_triCount_set
    __swig_getmethods__["triCount"] = _pyrecast.dtPolyDetail_triCount_get
    if _newclass:triCount = _swig_property(_pyrecast.dtPolyDetail_triCount_get, _pyrecast.dtPolyDetail_triCount_set)
    def __init__(self): 
        this = _pyrecast.new_dtPolyDetail()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtPolyDetail
    __del__ = lambda self : None;
dtPolyDetail_swigregister = _pyrecast.dtPolyDetail_swigregister
dtPolyDetail_swigregister(dtPolyDetail)

class dtLink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtLink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtLink, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ref"] = _pyrecast.dtLink_ref_set
    __swig_getmethods__["ref"] = _pyrecast.dtLink_ref_get
    if _newclass:ref = _swig_property(_pyrecast.dtLink_ref_get, _pyrecast.dtLink_ref_set)
    __swig_setmethods__["next"] = _pyrecast.dtLink_next_set
    __swig_getmethods__["next"] = _pyrecast.dtLink_next_get
    if _newclass:next = _swig_property(_pyrecast.dtLink_next_get, _pyrecast.dtLink_next_set)
    __swig_setmethods__["edge"] = _pyrecast.dtLink_edge_set
    __swig_getmethods__["edge"] = _pyrecast.dtLink_edge_get
    if _newclass:edge = _swig_property(_pyrecast.dtLink_edge_get, _pyrecast.dtLink_edge_set)
    __swig_setmethods__["side"] = _pyrecast.dtLink_side_set
    __swig_getmethods__["side"] = _pyrecast.dtLink_side_get
    if _newclass:side = _swig_property(_pyrecast.dtLink_side_get, _pyrecast.dtLink_side_set)
    __swig_setmethods__["bmin"] = _pyrecast.dtLink_bmin_set
    __swig_getmethods__["bmin"] = _pyrecast.dtLink_bmin_get
    if _newclass:bmin = _swig_property(_pyrecast.dtLink_bmin_get, _pyrecast.dtLink_bmin_set)
    __swig_setmethods__["bmax"] = _pyrecast.dtLink_bmax_set
    __swig_getmethods__["bmax"] = _pyrecast.dtLink_bmax_get
    if _newclass:bmax = _swig_property(_pyrecast.dtLink_bmax_get, _pyrecast.dtLink_bmax_set)
    def __init__(self): 
        this = _pyrecast.new_dtLink()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtLink
    __del__ = lambda self : None;
dtLink_swigregister = _pyrecast.dtLink_swigregister
dtLink_swigregister(dtLink)

class dtBVNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtBVNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtBVNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bmin"] = _pyrecast.dtBVNode_bmin_set
    __swig_getmethods__["bmin"] = _pyrecast.dtBVNode_bmin_get
    if _newclass:bmin = _swig_property(_pyrecast.dtBVNode_bmin_get, _pyrecast.dtBVNode_bmin_set)
    __swig_setmethods__["bmax"] = _pyrecast.dtBVNode_bmax_set
    __swig_getmethods__["bmax"] = _pyrecast.dtBVNode_bmax_get
    if _newclass:bmax = _swig_property(_pyrecast.dtBVNode_bmax_get, _pyrecast.dtBVNode_bmax_set)
    __swig_setmethods__["i"] = _pyrecast.dtBVNode_i_set
    __swig_getmethods__["i"] = _pyrecast.dtBVNode_i_get
    if _newclass:i = _swig_property(_pyrecast.dtBVNode_i_get, _pyrecast.dtBVNode_i_set)
    def __init__(self): 
        this = _pyrecast.new_dtBVNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtBVNode
    __del__ = lambda self : None;
dtBVNode_swigregister = _pyrecast.dtBVNode_swigregister
dtBVNode_swigregister(dtBVNode)

class dtOffMeshConnection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtOffMeshConnection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtOffMeshConnection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pos"] = _pyrecast.dtOffMeshConnection_pos_set
    __swig_getmethods__["pos"] = _pyrecast.dtOffMeshConnection_pos_get
    if _newclass:pos = _swig_property(_pyrecast.dtOffMeshConnection_pos_get, _pyrecast.dtOffMeshConnection_pos_set)
    __swig_setmethods__["rad"] = _pyrecast.dtOffMeshConnection_rad_set
    __swig_getmethods__["rad"] = _pyrecast.dtOffMeshConnection_rad_get
    if _newclass:rad = _swig_property(_pyrecast.dtOffMeshConnection_rad_get, _pyrecast.dtOffMeshConnection_rad_set)
    __swig_setmethods__["poly"] = _pyrecast.dtOffMeshConnection_poly_set
    __swig_getmethods__["poly"] = _pyrecast.dtOffMeshConnection_poly_get
    if _newclass:poly = _swig_property(_pyrecast.dtOffMeshConnection_poly_get, _pyrecast.dtOffMeshConnection_poly_set)
    __swig_setmethods__["flags"] = _pyrecast.dtOffMeshConnection_flags_set
    __swig_getmethods__["flags"] = _pyrecast.dtOffMeshConnection_flags_get
    if _newclass:flags = _swig_property(_pyrecast.dtOffMeshConnection_flags_get, _pyrecast.dtOffMeshConnection_flags_set)
    __swig_setmethods__["side"] = _pyrecast.dtOffMeshConnection_side_set
    __swig_getmethods__["side"] = _pyrecast.dtOffMeshConnection_side_get
    if _newclass:side = _swig_property(_pyrecast.dtOffMeshConnection_side_get, _pyrecast.dtOffMeshConnection_side_set)
    __swig_setmethods__["userId"] = _pyrecast.dtOffMeshConnection_userId_set
    __swig_getmethods__["userId"] = _pyrecast.dtOffMeshConnection_userId_get
    if _newclass:userId = _swig_property(_pyrecast.dtOffMeshConnection_userId_get, _pyrecast.dtOffMeshConnection_userId_set)
    def __init__(self): 
        this = _pyrecast.new_dtOffMeshConnection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtOffMeshConnection
    __del__ = lambda self : None;
dtOffMeshConnection_swigregister = _pyrecast.dtOffMeshConnection_swigregister
dtOffMeshConnection_swigregister(dtOffMeshConnection)

class dtMeshHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtMeshHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtMeshHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["magic"] = _pyrecast.dtMeshHeader_magic_set
    __swig_getmethods__["magic"] = _pyrecast.dtMeshHeader_magic_get
    if _newclass:magic = _swig_property(_pyrecast.dtMeshHeader_magic_get, _pyrecast.dtMeshHeader_magic_set)
    __swig_setmethods__["version"] = _pyrecast.dtMeshHeader_version_set
    __swig_getmethods__["version"] = _pyrecast.dtMeshHeader_version_get
    if _newclass:version = _swig_property(_pyrecast.dtMeshHeader_version_get, _pyrecast.dtMeshHeader_version_set)
    __swig_setmethods__["x"] = _pyrecast.dtMeshHeader_x_set
    __swig_getmethods__["x"] = _pyrecast.dtMeshHeader_x_get
    if _newclass:x = _swig_property(_pyrecast.dtMeshHeader_x_get, _pyrecast.dtMeshHeader_x_set)
    __swig_setmethods__["y"] = _pyrecast.dtMeshHeader_y_set
    __swig_getmethods__["y"] = _pyrecast.dtMeshHeader_y_get
    if _newclass:y = _swig_property(_pyrecast.dtMeshHeader_y_get, _pyrecast.dtMeshHeader_y_set)
    __swig_setmethods__["layer"] = _pyrecast.dtMeshHeader_layer_set
    __swig_getmethods__["layer"] = _pyrecast.dtMeshHeader_layer_get
    if _newclass:layer = _swig_property(_pyrecast.dtMeshHeader_layer_get, _pyrecast.dtMeshHeader_layer_set)
    __swig_setmethods__["userId"] = _pyrecast.dtMeshHeader_userId_set
    __swig_getmethods__["userId"] = _pyrecast.dtMeshHeader_userId_get
    if _newclass:userId = _swig_property(_pyrecast.dtMeshHeader_userId_get, _pyrecast.dtMeshHeader_userId_set)
    __swig_setmethods__["polyCount"] = _pyrecast.dtMeshHeader_polyCount_set
    __swig_getmethods__["polyCount"] = _pyrecast.dtMeshHeader_polyCount_get
    if _newclass:polyCount = _swig_property(_pyrecast.dtMeshHeader_polyCount_get, _pyrecast.dtMeshHeader_polyCount_set)
    __swig_setmethods__["vertCount"] = _pyrecast.dtMeshHeader_vertCount_set
    __swig_getmethods__["vertCount"] = _pyrecast.dtMeshHeader_vertCount_get
    if _newclass:vertCount = _swig_property(_pyrecast.dtMeshHeader_vertCount_get, _pyrecast.dtMeshHeader_vertCount_set)
    __swig_setmethods__["maxLinkCount"] = _pyrecast.dtMeshHeader_maxLinkCount_set
    __swig_getmethods__["maxLinkCount"] = _pyrecast.dtMeshHeader_maxLinkCount_get
    if _newclass:maxLinkCount = _swig_property(_pyrecast.dtMeshHeader_maxLinkCount_get, _pyrecast.dtMeshHeader_maxLinkCount_set)
    __swig_setmethods__["detailMeshCount"] = _pyrecast.dtMeshHeader_detailMeshCount_set
    __swig_getmethods__["detailMeshCount"] = _pyrecast.dtMeshHeader_detailMeshCount_get
    if _newclass:detailMeshCount = _swig_property(_pyrecast.dtMeshHeader_detailMeshCount_get, _pyrecast.dtMeshHeader_detailMeshCount_set)
    __swig_setmethods__["detailVertCount"] = _pyrecast.dtMeshHeader_detailVertCount_set
    __swig_getmethods__["detailVertCount"] = _pyrecast.dtMeshHeader_detailVertCount_get
    if _newclass:detailVertCount = _swig_property(_pyrecast.dtMeshHeader_detailVertCount_get, _pyrecast.dtMeshHeader_detailVertCount_set)
    __swig_setmethods__["detailTriCount"] = _pyrecast.dtMeshHeader_detailTriCount_set
    __swig_getmethods__["detailTriCount"] = _pyrecast.dtMeshHeader_detailTriCount_get
    if _newclass:detailTriCount = _swig_property(_pyrecast.dtMeshHeader_detailTriCount_get, _pyrecast.dtMeshHeader_detailTriCount_set)
    __swig_setmethods__["bvNodeCount"] = _pyrecast.dtMeshHeader_bvNodeCount_set
    __swig_getmethods__["bvNodeCount"] = _pyrecast.dtMeshHeader_bvNodeCount_get
    if _newclass:bvNodeCount = _swig_property(_pyrecast.dtMeshHeader_bvNodeCount_get, _pyrecast.dtMeshHeader_bvNodeCount_set)
    __swig_setmethods__["offMeshConCount"] = _pyrecast.dtMeshHeader_offMeshConCount_set
    __swig_getmethods__["offMeshConCount"] = _pyrecast.dtMeshHeader_offMeshConCount_get
    if _newclass:offMeshConCount = _swig_property(_pyrecast.dtMeshHeader_offMeshConCount_get, _pyrecast.dtMeshHeader_offMeshConCount_set)
    __swig_setmethods__["offMeshBase"] = _pyrecast.dtMeshHeader_offMeshBase_set
    __swig_getmethods__["offMeshBase"] = _pyrecast.dtMeshHeader_offMeshBase_get
    if _newclass:offMeshBase = _swig_property(_pyrecast.dtMeshHeader_offMeshBase_get, _pyrecast.dtMeshHeader_offMeshBase_set)
    __swig_setmethods__["walkableHeight"] = _pyrecast.dtMeshHeader_walkableHeight_set
    __swig_getmethods__["walkableHeight"] = _pyrecast.dtMeshHeader_walkableHeight_get
    if _newclass:walkableHeight = _swig_property(_pyrecast.dtMeshHeader_walkableHeight_get, _pyrecast.dtMeshHeader_walkableHeight_set)
    __swig_setmethods__["walkableRadius"] = _pyrecast.dtMeshHeader_walkableRadius_set
    __swig_getmethods__["walkableRadius"] = _pyrecast.dtMeshHeader_walkableRadius_get
    if _newclass:walkableRadius = _swig_property(_pyrecast.dtMeshHeader_walkableRadius_get, _pyrecast.dtMeshHeader_walkableRadius_set)
    __swig_setmethods__["walkableClimb"] = _pyrecast.dtMeshHeader_walkableClimb_set
    __swig_getmethods__["walkableClimb"] = _pyrecast.dtMeshHeader_walkableClimb_get
    if _newclass:walkableClimb = _swig_property(_pyrecast.dtMeshHeader_walkableClimb_get, _pyrecast.dtMeshHeader_walkableClimb_set)
    __swig_setmethods__["bmin"] = _pyrecast.dtMeshHeader_bmin_set
    __swig_getmethods__["bmin"] = _pyrecast.dtMeshHeader_bmin_get
    if _newclass:bmin = _swig_property(_pyrecast.dtMeshHeader_bmin_get, _pyrecast.dtMeshHeader_bmin_set)
    __swig_setmethods__["bmax"] = _pyrecast.dtMeshHeader_bmax_set
    __swig_getmethods__["bmax"] = _pyrecast.dtMeshHeader_bmax_get
    if _newclass:bmax = _swig_property(_pyrecast.dtMeshHeader_bmax_get, _pyrecast.dtMeshHeader_bmax_set)
    __swig_setmethods__["bvQuantFactor"] = _pyrecast.dtMeshHeader_bvQuantFactor_set
    __swig_getmethods__["bvQuantFactor"] = _pyrecast.dtMeshHeader_bvQuantFactor_get
    if _newclass:bvQuantFactor = _swig_property(_pyrecast.dtMeshHeader_bvQuantFactor_get, _pyrecast.dtMeshHeader_bvQuantFactor_set)
    def __init__(self): 
        this = _pyrecast.new_dtMeshHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtMeshHeader
    __del__ = lambda self : None;
dtMeshHeader_swigregister = _pyrecast.dtMeshHeader_swigregister
dtMeshHeader_swigregister(dtMeshHeader)

class dtMeshTile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtMeshTile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtMeshTile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["salt"] = _pyrecast.dtMeshTile_salt_set
    __swig_getmethods__["salt"] = _pyrecast.dtMeshTile_salt_get
    if _newclass:salt = _swig_property(_pyrecast.dtMeshTile_salt_get, _pyrecast.dtMeshTile_salt_set)
    __swig_setmethods__["linksFreeList"] = _pyrecast.dtMeshTile_linksFreeList_set
    __swig_getmethods__["linksFreeList"] = _pyrecast.dtMeshTile_linksFreeList_get
    if _newclass:linksFreeList = _swig_property(_pyrecast.dtMeshTile_linksFreeList_get, _pyrecast.dtMeshTile_linksFreeList_set)
    __swig_setmethods__["header"] = _pyrecast.dtMeshTile_header_set
    __swig_getmethods__["header"] = _pyrecast.dtMeshTile_header_get
    if _newclass:header = _swig_property(_pyrecast.dtMeshTile_header_get, _pyrecast.dtMeshTile_header_set)
    __swig_setmethods__["polys"] = _pyrecast.dtMeshTile_polys_set
    __swig_getmethods__["polys"] = _pyrecast.dtMeshTile_polys_get
    if _newclass:polys = _swig_property(_pyrecast.dtMeshTile_polys_get, _pyrecast.dtMeshTile_polys_set)
    __swig_setmethods__["verts"] = _pyrecast.dtMeshTile_verts_set
    __swig_getmethods__["verts"] = _pyrecast.dtMeshTile_verts_get
    if _newclass:verts = _swig_property(_pyrecast.dtMeshTile_verts_get, _pyrecast.dtMeshTile_verts_set)
    __swig_setmethods__["links"] = _pyrecast.dtMeshTile_links_set
    __swig_getmethods__["links"] = _pyrecast.dtMeshTile_links_get
    if _newclass:links = _swig_property(_pyrecast.dtMeshTile_links_get, _pyrecast.dtMeshTile_links_set)
    __swig_setmethods__["detailMeshes"] = _pyrecast.dtMeshTile_detailMeshes_set
    __swig_getmethods__["detailMeshes"] = _pyrecast.dtMeshTile_detailMeshes_get
    if _newclass:detailMeshes = _swig_property(_pyrecast.dtMeshTile_detailMeshes_get, _pyrecast.dtMeshTile_detailMeshes_set)
    __swig_setmethods__["detailVerts"] = _pyrecast.dtMeshTile_detailVerts_set
    __swig_getmethods__["detailVerts"] = _pyrecast.dtMeshTile_detailVerts_get
    if _newclass:detailVerts = _swig_property(_pyrecast.dtMeshTile_detailVerts_get, _pyrecast.dtMeshTile_detailVerts_set)
    __swig_setmethods__["detailTris"] = _pyrecast.dtMeshTile_detailTris_set
    __swig_getmethods__["detailTris"] = _pyrecast.dtMeshTile_detailTris_get
    if _newclass:detailTris = _swig_property(_pyrecast.dtMeshTile_detailTris_get, _pyrecast.dtMeshTile_detailTris_set)
    __swig_setmethods__["bvTree"] = _pyrecast.dtMeshTile_bvTree_set
    __swig_getmethods__["bvTree"] = _pyrecast.dtMeshTile_bvTree_get
    if _newclass:bvTree = _swig_property(_pyrecast.dtMeshTile_bvTree_get, _pyrecast.dtMeshTile_bvTree_set)
    __swig_setmethods__["offMeshCons"] = _pyrecast.dtMeshTile_offMeshCons_set
    __swig_getmethods__["offMeshCons"] = _pyrecast.dtMeshTile_offMeshCons_get
    if _newclass:offMeshCons = _swig_property(_pyrecast.dtMeshTile_offMeshCons_get, _pyrecast.dtMeshTile_offMeshCons_set)
    __swig_setmethods__["data"] = _pyrecast.dtMeshTile_data_set
    __swig_getmethods__["data"] = _pyrecast.dtMeshTile_data_get
    if _newclass:data = _swig_property(_pyrecast.dtMeshTile_data_get, _pyrecast.dtMeshTile_data_set)
    __swig_setmethods__["dataSize"] = _pyrecast.dtMeshTile_dataSize_set
    __swig_getmethods__["dataSize"] = _pyrecast.dtMeshTile_dataSize_get
    if _newclass:dataSize = _swig_property(_pyrecast.dtMeshTile_dataSize_get, _pyrecast.dtMeshTile_dataSize_set)
    __swig_setmethods__["flags"] = _pyrecast.dtMeshTile_flags_set
    __swig_getmethods__["flags"] = _pyrecast.dtMeshTile_flags_get
    if _newclass:flags = _swig_property(_pyrecast.dtMeshTile_flags_get, _pyrecast.dtMeshTile_flags_set)
    __swig_setmethods__["next"] = _pyrecast.dtMeshTile_next_set
    __swig_getmethods__["next"] = _pyrecast.dtMeshTile_next_get
    if _newclass:next = _swig_property(_pyrecast.dtMeshTile_next_get, _pyrecast.dtMeshTile_next_set)
    def __init__(self): 
        this = _pyrecast.new_dtMeshTile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtMeshTile
    __del__ = lambda self : None;
dtMeshTile_swigregister = _pyrecast.dtMeshTile_swigregister
dtMeshTile_swigregister(dtMeshTile)

class dtNavMeshParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtNavMeshParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtNavMeshParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["orig"] = _pyrecast.dtNavMeshParams_orig_set
    __swig_getmethods__["orig"] = _pyrecast.dtNavMeshParams_orig_get
    if _newclass:orig = _swig_property(_pyrecast.dtNavMeshParams_orig_get, _pyrecast.dtNavMeshParams_orig_set)
    __swig_setmethods__["tileWidth"] = _pyrecast.dtNavMeshParams_tileWidth_set
    __swig_getmethods__["tileWidth"] = _pyrecast.dtNavMeshParams_tileWidth_get
    if _newclass:tileWidth = _swig_property(_pyrecast.dtNavMeshParams_tileWidth_get, _pyrecast.dtNavMeshParams_tileWidth_set)
    __swig_setmethods__["tileHeight"] = _pyrecast.dtNavMeshParams_tileHeight_set
    __swig_getmethods__["tileHeight"] = _pyrecast.dtNavMeshParams_tileHeight_get
    if _newclass:tileHeight = _swig_property(_pyrecast.dtNavMeshParams_tileHeight_get, _pyrecast.dtNavMeshParams_tileHeight_set)
    __swig_setmethods__["maxTiles"] = _pyrecast.dtNavMeshParams_maxTiles_set
    __swig_getmethods__["maxTiles"] = _pyrecast.dtNavMeshParams_maxTiles_get
    if _newclass:maxTiles = _swig_property(_pyrecast.dtNavMeshParams_maxTiles_get, _pyrecast.dtNavMeshParams_maxTiles_set)
    __swig_setmethods__["maxPolys"] = _pyrecast.dtNavMeshParams_maxPolys_set
    __swig_getmethods__["maxPolys"] = _pyrecast.dtNavMeshParams_maxPolys_get
    if _newclass:maxPolys = _swig_property(_pyrecast.dtNavMeshParams_maxPolys_get, _pyrecast.dtNavMeshParams_maxPolys_set)
    def __init__(self): 
        this = _pyrecast.new_dtNavMeshParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtNavMeshParams
    __del__ = lambda self : None;
dtNavMeshParams_swigregister = _pyrecast.dtNavMeshParams_swigregister
dtNavMeshParams_swigregister(dtNavMeshParams)

class dtNavMesh(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtNavMesh, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtNavMesh, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyrecast.new_dtNavMesh()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtNavMesh
    __del__ = lambda self : None;
    def init(self, *args): return _pyrecast.dtNavMesh_init(self, *args)
    def getParams(self): return _pyrecast.dtNavMesh_getParams(self)
    def addTile(self, *args): return _pyrecast.dtNavMesh_addTile(self, *args)
    def removeTile(self, *args): return _pyrecast.dtNavMesh_removeTile(self, *args)
    def calcTileLoc(self, *args): return _pyrecast.dtNavMesh_calcTileLoc(self, *args)
    def getTileAt(self, *args): return _pyrecast.dtNavMesh_getTileAt(self, *args)
    def getTileRefAt(self, *args): return _pyrecast.dtNavMesh_getTileRefAt(self, *args)
    def getTileRef(self, *args): return _pyrecast.dtNavMesh_getTileRef(self, *args)
    def getTileByRef(self, *args): return _pyrecast.dtNavMesh_getTileByRef(self, *args)
    def getMaxTiles(self): return _pyrecast.dtNavMesh_getMaxTiles(self)
    def getTileAndPolyByRef(self, *args): return _pyrecast.dtNavMesh_getTileAndPolyByRef(self, *args)
    def getTileAndPolyByRefUnsafe(self, *args): return _pyrecast.dtNavMesh_getTileAndPolyByRefUnsafe(self, *args)
    def isValidPolyRef(self, *args): return _pyrecast.dtNavMesh_isValidPolyRef(self, *args)
    def getPolyRefBase(self, *args): return _pyrecast.dtNavMesh_getPolyRefBase(self, *args)
    def getOffMeshConnectionPolyEndPoints(self, *args): return _pyrecast.dtNavMesh_getOffMeshConnectionPolyEndPoints(self, *args)
    def getOffMeshConnectionByRef(self, *args): return _pyrecast.dtNavMesh_getOffMeshConnectionByRef(self, *args)
    def setPolyFlags(self, *args): return _pyrecast.dtNavMesh_setPolyFlags(self, *args)
    def getPolyFlags(self, *args): return _pyrecast.dtNavMesh_getPolyFlags(self, *args)
    def setPolyArea(self, *args): return _pyrecast.dtNavMesh_setPolyArea(self, *args)
    def getPolyArea(self, *args): return _pyrecast.dtNavMesh_getPolyArea(self, *args)
    def getTileStateSize(self, *args): return _pyrecast.dtNavMesh_getTileStateSize(self, *args)
    def storeTileState(self, *args): return _pyrecast.dtNavMesh_storeTileState(self, *args)
    def restoreTileState(self, *args): return _pyrecast.dtNavMesh_restoreTileState(self, *args)
    def encodePolyId(self, *args): return _pyrecast.dtNavMesh_encodePolyId(self, *args)
    def decodePolyId(self, *args): return _pyrecast.dtNavMesh_decodePolyId(self, *args)
    def decodePolyIdSalt(self, *args): return _pyrecast.dtNavMesh_decodePolyIdSalt(self, *args)
    def decodePolyIdTile(self, *args): return _pyrecast.dtNavMesh_decodePolyIdTile(self, *args)
    def decodePolyIdPoly(self, *args): return _pyrecast.dtNavMesh_decodePolyIdPoly(self, *args)
    def getTile(self, *args): return _pyrecast.dtNavMesh_getTile(self, *args)
    def getTilesAt(self, *args): return _pyrecast.dtNavMesh_getTilesAt(self, *args)
    def getNeighbourTilesAt(self, *args): return _pyrecast.dtNavMesh_getNeighbourTilesAt(self, *args)
    def findConnectingPolys(self, *args): return _pyrecast.dtNavMesh_findConnectingPolys(self, *args)
    def connectIntLinks(self, *args): return _pyrecast.dtNavMesh_connectIntLinks(self, *args)
    def baseOffMeshLinks(self, *args): return _pyrecast.dtNavMesh_baseOffMeshLinks(self, *args)
    def connectExtLinks(self, *args): return _pyrecast.dtNavMesh_connectExtLinks(self, *args)
    def connectExtOffMeshLinks(self, *args): return _pyrecast.dtNavMesh_connectExtOffMeshLinks(self, *args)
    def unconnectExtLinks(self, *args): return _pyrecast.dtNavMesh_unconnectExtLinks(self, *args)
    def queryPolygonsInTile(self, *args): return _pyrecast.dtNavMesh_queryPolygonsInTile(self, *args)
    def findNearestPolyInTile(self, *args): return _pyrecast.dtNavMesh_findNearestPolyInTile(self, *args)
    def closestPointOnPolyInTile(self, *args): return _pyrecast.dtNavMesh_closestPointOnPolyInTile(self, *args)
    __swig_setmethods__["m_params"] = _pyrecast.dtNavMesh_m_params_set
    __swig_getmethods__["m_params"] = _pyrecast.dtNavMesh_m_params_get
    if _newclass:m_params = _swig_property(_pyrecast.dtNavMesh_m_params_get, _pyrecast.dtNavMesh_m_params_set)
    __swig_setmethods__["m_orig"] = _pyrecast.dtNavMesh_m_orig_set
    __swig_getmethods__["m_orig"] = _pyrecast.dtNavMesh_m_orig_get
    if _newclass:m_orig = _swig_property(_pyrecast.dtNavMesh_m_orig_get, _pyrecast.dtNavMesh_m_orig_set)
    __swig_setmethods__["m_tileWidth"] = _pyrecast.dtNavMesh_m_tileWidth_set
    __swig_getmethods__["m_tileWidth"] = _pyrecast.dtNavMesh_m_tileWidth_get
    if _newclass:m_tileWidth = _swig_property(_pyrecast.dtNavMesh_m_tileWidth_get, _pyrecast.dtNavMesh_m_tileWidth_set)
    __swig_setmethods__["m_tileHeight"] = _pyrecast.dtNavMesh_m_tileHeight_set
    __swig_getmethods__["m_tileHeight"] = _pyrecast.dtNavMesh_m_tileHeight_get
    if _newclass:m_tileHeight = _swig_property(_pyrecast.dtNavMesh_m_tileHeight_get, _pyrecast.dtNavMesh_m_tileHeight_set)
    __swig_setmethods__["m_maxTiles"] = _pyrecast.dtNavMesh_m_maxTiles_set
    __swig_getmethods__["m_maxTiles"] = _pyrecast.dtNavMesh_m_maxTiles_get
    if _newclass:m_maxTiles = _swig_property(_pyrecast.dtNavMesh_m_maxTiles_get, _pyrecast.dtNavMesh_m_maxTiles_set)
    __swig_setmethods__["m_tileLutSize"] = _pyrecast.dtNavMesh_m_tileLutSize_set
    __swig_getmethods__["m_tileLutSize"] = _pyrecast.dtNavMesh_m_tileLutSize_get
    if _newclass:m_tileLutSize = _swig_property(_pyrecast.dtNavMesh_m_tileLutSize_get, _pyrecast.dtNavMesh_m_tileLutSize_set)
    __swig_setmethods__["m_tileLutMask"] = _pyrecast.dtNavMesh_m_tileLutMask_set
    __swig_getmethods__["m_tileLutMask"] = _pyrecast.dtNavMesh_m_tileLutMask_get
    if _newclass:m_tileLutMask = _swig_property(_pyrecast.dtNavMesh_m_tileLutMask_get, _pyrecast.dtNavMesh_m_tileLutMask_set)
    __swig_setmethods__["m_posLookup"] = _pyrecast.dtNavMesh_m_posLookup_set
    __swig_getmethods__["m_posLookup"] = _pyrecast.dtNavMesh_m_posLookup_get
    if _newclass:m_posLookup = _swig_property(_pyrecast.dtNavMesh_m_posLookup_get, _pyrecast.dtNavMesh_m_posLookup_set)
    __swig_setmethods__["m_nextFree"] = _pyrecast.dtNavMesh_m_nextFree_set
    __swig_getmethods__["m_nextFree"] = _pyrecast.dtNavMesh_m_nextFree_get
    if _newclass:m_nextFree = _swig_property(_pyrecast.dtNavMesh_m_nextFree_get, _pyrecast.dtNavMesh_m_nextFree_set)
    __swig_setmethods__["m_tiles"] = _pyrecast.dtNavMesh_m_tiles_set
    __swig_getmethods__["m_tiles"] = _pyrecast.dtNavMesh_m_tiles_get
    if _newclass:m_tiles = _swig_property(_pyrecast.dtNavMesh_m_tiles_get, _pyrecast.dtNavMesh_m_tiles_set)
    __swig_setmethods__["m_saltBits"] = _pyrecast.dtNavMesh_m_saltBits_set
    __swig_getmethods__["m_saltBits"] = _pyrecast.dtNavMesh_m_saltBits_get
    if _newclass:m_saltBits = _swig_property(_pyrecast.dtNavMesh_m_saltBits_get, _pyrecast.dtNavMesh_m_saltBits_set)
    __swig_setmethods__["m_tileBits"] = _pyrecast.dtNavMesh_m_tileBits_set
    __swig_getmethods__["m_tileBits"] = _pyrecast.dtNavMesh_m_tileBits_get
    if _newclass:m_tileBits = _swig_property(_pyrecast.dtNavMesh_m_tileBits_get, _pyrecast.dtNavMesh_m_tileBits_set)
    __swig_setmethods__["m_polyBits"] = _pyrecast.dtNavMesh_m_polyBits_set
    __swig_getmethods__["m_polyBits"] = _pyrecast.dtNavMesh_m_polyBits_get
    if _newclass:m_polyBits = _swig_property(_pyrecast.dtNavMesh_m_polyBits_get, _pyrecast.dtNavMesh_m_polyBits_set)
dtNavMesh_swigregister = _pyrecast.dtNavMesh_swigregister
dtNavMesh_swigregister(dtNavMesh)


def dtAllocNavMesh():
  return _pyrecast.dtAllocNavMesh()
dtAllocNavMesh = _pyrecast.dtAllocNavMesh

def dtFreeNavMesh(*args):
  return _pyrecast.dtFreeNavMesh(*args)
dtFreeNavMesh = _pyrecast.dtFreeNavMesh
class dtNavMeshCreateParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtNavMeshCreateParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtNavMeshCreateParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["verts"] = _pyrecast.dtNavMeshCreateParams_verts_set
    __swig_getmethods__["verts"] = _pyrecast.dtNavMeshCreateParams_verts_get
    if _newclass:verts = _swig_property(_pyrecast.dtNavMeshCreateParams_verts_get, _pyrecast.dtNavMeshCreateParams_verts_set)
    __swig_setmethods__["vertCount"] = _pyrecast.dtNavMeshCreateParams_vertCount_set
    __swig_getmethods__["vertCount"] = _pyrecast.dtNavMeshCreateParams_vertCount_get
    if _newclass:vertCount = _swig_property(_pyrecast.dtNavMeshCreateParams_vertCount_get, _pyrecast.dtNavMeshCreateParams_vertCount_set)
    __swig_setmethods__["polys"] = _pyrecast.dtNavMeshCreateParams_polys_set
    __swig_getmethods__["polys"] = _pyrecast.dtNavMeshCreateParams_polys_get
    if _newclass:polys = _swig_property(_pyrecast.dtNavMeshCreateParams_polys_get, _pyrecast.dtNavMeshCreateParams_polys_set)
    __swig_setmethods__["polyFlags"] = _pyrecast.dtNavMeshCreateParams_polyFlags_set
    __swig_getmethods__["polyFlags"] = _pyrecast.dtNavMeshCreateParams_polyFlags_get
    if _newclass:polyFlags = _swig_property(_pyrecast.dtNavMeshCreateParams_polyFlags_get, _pyrecast.dtNavMeshCreateParams_polyFlags_set)
    __swig_setmethods__["polyAreas"] = _pyrecast.dtNavMeshCreateParams_polyAreas_set
    __swig_getmethods__["polyAreas"] = _pyrecast.dtNavMeshCreateParams_polyAreas_get
    if _newclass:polyAreas = _swig_property(_pyrecast.dtNavMeshCreateParams_polyAreas_get, _pyrecast.dtNavMeshCreateParams_polyAreas_set)
    __swig_setmethods__["polyCount"] = _pyrecast.dtNavMeshCreateParams_polyCount_set
    __swig_getmethods__["polyCount"] = _pyrecast.dtNavMeshCreateParams_polyCount_get
    if _newclass:polyCount = _swig_property(_pyrecast.dtNavMeshCreateParams_polyCount_get, _pyrecast.dtNavMeshCreateParams_polyCount_set)
    __swig_setmethods__["nvp"] = _pyrecast.dtNavMeshCreateParams_nvp_set
    __swig_getmethods__["nvp"] = _pyrecast.dtNavMeshCreateParams_nvp_get
    if _newclass:nvp = _swig_property(_pyrecast.dtNavMeshCreateParams_nvp_get, _pyrecast.dtNavMeshCreateParams_nvp_set)
    __swig_setmethods__["detailMeshes"] = _pyrecast.dtNavMeshCreateParams_detailMeshes_set
    __swig_getmethods__["detailMeshes"] = _pyrecast.dtNavMeshCreateParams_detailMeshes_get
    if _newclass:detailMeshes = _swig_property(_pyrecast.dtNavMeshCreateParams_detailMeshes_get, _pyrecast.dtNavMeshCreateParams_detailMeshes_set)
    __swig_setmethods__["detailVerts"] = _pyrecast.dtNavMeshCreateParams_detailVerts_set
    __swig_getmethods__["detailVerts"] = _pyrecast.dtNavMeshCreateParams_detailVerts_get
    if _newclass:detailVerts = _swig_property(_pyrecast.dtNavMeshCreateParams_detailVerts_get, _pyrecast.dtNavMeshCreateParams_detailVerts_set)
    __swig_setmethods__["detailVertsCount"] = _pyrecast.dtNavMeshCreateParams_detailVertsCount_set
    __swig_getmethods__["detailVertsCount"] = _pyrecast.dtNavMeshCreateParams_detailVertsCount_get
    if _newclass:detailVertsCount = _swig_property(_pyrecast.dtNavMeshCreateParams_detailVertsCount_get, _pyrecast.dtNavMeshCreateParams_detailVertsCount_set)
    __swig_setmethods__["detailTris"] = _pyrecast.dtNavMeshCreateParams_detailTris_set
    __swig_getmethods__["detailTris"] = _pyrecast.dtNavMeshCreateParams_detailTris_get
    if _newclass:detailTris = _swig_property(_pyrecast.dtNavMeshCreateParams_detailTris_get, _pyrecast.dtNavMeshCreateParams_detailTris_set)
    __swig_setmethods__["detailTriCount"] = _pyrecast.dtNavMeshCreateParams_detailTriCount_set
    __swig_getmethods__["detailTriCount"] = _pyrecast.dtNavMeshCreateParams_detailTriCount_get
    if _newclass:detailTriCount = _swig_property(_pyrecast.dtNavMeshCreateParams_detailTriCount_get, _pyrecast.dtNavMeshCreateParams_detailTriCount_set)
    __swig_setmethods__["offMeshConVerts"] = _pyrecast.dtNavMeshCreateParams_offMeshConVerts_set
    __swig_getmethods__["offMeshConVerts"] = _pyrecast.dtNavMeshCreateParams_offMeshConVerts_get
    if _newclass:offMeshConVerts = _swig_property(_pyrecast.dtNavMeshCreateParams_offMeshConVerts_get, _pyrecast.dtNavMeshCreateParams_offMeshConVerts_set)
    __swig_setmethods__["offMeshConRad"] = _pyrecast.dtNavMeshCreateParams_offMeshConRad_set
    __swig_getmethods__["offMeshConRad"] = _pyrecast.dtNavMeshCreateParams_offMeshConRad_get
    if _newclass:offMeshConRad = _swig_property(_pyrecast.dtNavMeshCreateParams_offMeshConRad_get, _pyrecast.dtNavMeshCreateParams_offMeshConRad_set)
    __swig_setmethods__["offMeshConFlags"] = _pyrecast.dtNavMeshCreateParams_offMeshConFlags_set
    __swig_getmethods__["offMeshConFlags"] = _pyrecast.dtNavMeshCreateParams_offMeshConFlags_get
    if _newclass:offMeshConFlags = _swig_property(_pyrecast.dtNavMeshCreateParams_offMeshConFlags_get, _pyrecast.dtNavMeshCreateParams_offMeshConFlags_set)
    __swig_setmethods__["offMeshConAreas"] = _pyrecast.dtNavMeshCreateParams_offMeshConAreas_set
    __swig_getmethods__["offMeshConAreas"] = _pyrecast.dtNavMeshCreateParams_offMeshConAreas_get
    if _newclass:offMeshConAreas = _swig_property(_pyrecast.dtNavMeshCreateParams_offMeshConAreas_get, _pyrecast.dtNavMeshCreateParams_offMeshConAreas_set)
    __swig_setmethods__["offMeshConDir"] = _pyrecast.dtNavMeshCreateParams_offMeshConDir_set
    __swig_getmethods__["offMeshConDir"] = _pyrecast.dtNavMeshCreateParams_offMeshConDir_get
    if _newclass:offMeshConDir = _swig_property(_pyrecast.dtNavMeshCreateParams_offMeshConDir_get, _pyrecast.dtNavMeshCreateParams_offMeshConDir_set)
    __swig_setmethods__["offMeshConUserID"] = _pyrecast.dtNavMeshCreateParams_offMeshConUserID_set
    __swig_getmethods__["offMeshConUserID"] = _pyrecast.dtNavMeshCreateParams_offMeshConUserID_get
    if _newclass:offMeshConUserID = _swig_property(_pyrecast.dtNavMeshCreateParams_offMeshConUserID_get, _pyrecast.dtNavMeshCreateParams_offMeshConUserID_set)
    __swig_setmethods__["offMeshConCount"] = _pyrecast.dtNavMeshCreateParams_offMeshConCount_set
    __swig_getmethods__["offMeshConCount"] = _pyrecast.dtNavMeshCreateParams_offMeshConCount_get
    if _newclass:offMeshConCount = _swig_property(_pyrecast.dtNavMeshCreateParams_offMeshConCount_get, _pyrecast.dtNavMeshCreateParams_offMeshConCount_set)
    __swig_setmethods__["userId"] = _pyrecast.dtNavMeshCreateParams_userId_set
    __swig_getmethods__["userId"] = _pyrecast.dtNavMeshCreateParams_userId_get
    if _newclass:userId = _swig_property(_pyrecast.dtNavMeshCreateParams_userId_get, _pyrecast.dtNavMeshCreateParams_userId_set)
    __swig_setmethods__["tileX"] = _pyrecast.dtNavMeshCreateParams_tileX_set
    __swig_getmethods__["tileX"] = _pyrecast.dtNavMeshCreateParams_tileX_get
    if _newclass:tileX = _swig_property(_pyrecast.dtNavMeshCreateParams_tileX_get, _pyrecast.dtNavMeshCreateParams_tileX_set)
    __swig_setmethods__["tileY"] = _pyrecast.dtNavMeshCreateParams_tileY_set
    __swig_getmethods__["tileY"] = _pyrecast.dtNavMeshCreateParams_tileY_get
    if _newclass:tileY = _swig_property(_pyrecast.dtNavMeshCreateParams_tileY_get, _pyrecast.dtNavMeshCreateParams_tileY_set)
    __swig_setmethods__["tileLayer"] = _pyrecast.dtNavMeshCreateParams_tileLayer_set
    __swig_getmethods__["tileLayer"] = _pyrecast.dtNavMeshCreateParams_tileLayer_get
    if _newclass:tileLayer = _swig_property(_pyrecast.dtNavMeshCreateParams_tileLayer_get, _pyrecast.dtNavMeshCreateParams_tileLayer_set)
    __swig_setmethods__["bmin"] = _pyrecast.dtNavMeshCreateParams_bmin_set
    __swig_getmethods__["bmin"] = _pyrecast.dtNavMeshCreateParams_bmin_get
    if _newclass:bmin = _swig_property(_pyrecast.dtNavMeshCreateParams_bmin_get, _pyrecast.dtNavMeshCreateParams_bmin_set)
    __swig_setmethods__["bmax"] = _pyrecast.dtNavMeshCreateParams_bmax_set
    __swig_getmethods__["bmax"] = _pyrecast.dtNavMeshCreateParams_bmax_get
    if _newclass:bmax = _swig_property(_pyrecast.dtNavMeshCreateParams_bmax_get, _pyrecast.dtNavMeshCreateParams_bmax_set)
    __swig_setmethods__["walkableHeight"] = _pyrecast.dtNavMeshCreateParams_walkableHeight_set
    __swig_getmethods__["walkableHeight"] = _pyrecast.dtNavMeshCreateParams_walkableHeight_get
    if _newclass:walkableHeight = _swig_property(_pyrecast.dtNavMeshCreateParams_walkableHeight_get, _pyrecast.dtNavMeshCreateParams_walkableHeight_set)
    __swig_setmethods__["walkableRadius"] = _pyrecast.dtNavMeshCreateParams_walkableRadius_set
    __swig_getmethods__["walkableRadius"] = _pyrecast.dtNavMeshCreateParams_walkableRadius_get
    if _newclass:walkableRadius = _swig_property(_pyrecast.dtNavMeshCreateParams_walkableRadius_get, _pyrecast.dtNavMeshCreateParams_walkableRadius_set)
    __swig_setmethods__["walkableClimb"] = _pyrecast.dtNavMeshCreateParams_walkableClimb_set
    __swig_getmethods__["walkableClimb"] = _pyrecast.dtNavMeshCreateParams_walkableClimb_get
    if _newclass:walkableClimb = _swig_property(_pyrecast.dtNavMeshCreateParams_walkableClimb_get, _pyrecast.dtNavMeshCreateParams_walkableClimb_set)
    __swig_setmethods__["cs"] = _pyrecast.dtNavMeshCreateParams_cs_set
    __swig_getmethods__["cs"] = _pyrecast.dtNavMeshCreateParams_cs_get
    if _newclass:cs = _swig_property(_pyrecast.dtNavMeshCreateParams_cs_get, _pyrecast.dtNavMeshCreateParams_cs_set)
    __swig_setmethods__["ch"] = _pyrecast.dtNavMeshCreateParams_ch_set
    __swig_getmethods__["ch"] = _pyrecast.dtNavMeshCreateParams_ch_get
    if _newclass:ch = _swig_property(_pyrecast.dtNavMeshCreateParams_ch_get, _pyrecast.dtNavMeshCreateParams_ch_set)
    __swig_setmethods__["buildBvTree"] = _pyrecast.dtNavMeshCreateParams_buildBvTree_set
    __swig_getmethods__["buildBvTree"] = _pyrecast.dtNavMeshCreateParams_buildBvTree_get
    if _newclass:buildBvTree = _swig_property(_pyrecast.dtNavMeshCreateParams_buildBvTree_get, _pyrecast.dtNavMeshCreateParams_buildBvTree_set)
    def __init__(self): 
        this = _pyrecast.new_dtNavMeshCreateParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtNavMeshCreateParams
    __del__ = lambda self : None;
dtNavMeshCreateParams_swigregister = _pyrecast.dtNavMeshCreateParams_swigregister
dtNavMeshCreateParams_swigregister(dtNavMeshCreateParams)


def dtCreateNavMeshData(*args):
  return _pyrecast.dtCreateNavMeshData(*args)
dtCreateNavMeshData = _pyrecast.dtCreateNavMeshData

def dtNavMeshHeaderSwapEndian(*args):
  return _pyrecast.dtNavMeshHeaderSwapEndian(*args)
dtNavMeshHeaderSwapEndian = _pyrecast.dtNavMeshHeaderSwapEndian

def dtNavMeshDataSwapEndian(*args):
  return _pyrecast.dtNavMeshDataSwapEndian(*args)
dtNavMeshDataSwapEndian = _pyrecast.dtNavMeshDataSwapEndian

def dtSaveNavMesh(*args):
  return _pyrecast.dtSaveNavMesh(*args)
dtSaveNavMesh = _pyrecast.dtSaveNavMesh

def dtLoadMesh(*args):
  return _pyrecast.dtLoadMesh(*args)
dtLoadMesh = _pyrecast.dtLoadMesh
class dtQueryFilter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtQueryFilter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtQueryFilter, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyrecast.new_dtQueryFilter()
        try: self.this.append(this)
        except: self.this = this
    def passFilter(self, *args): return _pyrecast.dtQueryFilter_passFilter(self, *args)
    def getCost(self, *args): return _pyrecast.dtQueryFilter_getCost(self, *args)
    def getAreaCost(self, *args): return _pyrecast.dtQueryFilter_getAreaCost(self, *args)
    def setAreaCost(self, *args): return _pyrecast.dtQueryFilter_setAreaCost(self, *args)
    def getIncludeFlags(self): return _pyrecast.dtQueryFilter_getIncludeFlags(self)
    def setIncludeFlags(self, *args): return _pyrecast.dtQueryFilter_setIncludeFlags(self, *args)
    def getExcludeFlags(self): return _pyrecast.dtQueryFilter_getExcludeFlags(self)
    def setExcludeFlags(self, *args): return _pyrecast.dtQueryFilter_setExcludeFlags(self, *args)
    __swig_destroy__ = _pyrecast.delete_dtQueryFilter
    __del__ = lambda self : None;
dtQueryFilter_swigregister = _pyrecast.dtQueryFilter_swigregister
dtQueryFilter_swigregister(dtQueryFilter)

class dtNavMeshQuery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtNavMeshQuery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtNavMeshQuery, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyrecast.new_dtNavMeshQuery()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtNavMeshQuery
    __del__ = lambda self : None;
    def init(self, *args): return _pyrecast.dtNavMeshQuery_init(self, *args)
    def findPath(self, *args): return _pyrecast.dtNavMeshQuery_findPath(self, *args)
    def findStraightPath(self, *args): return _pyrecast.dtNavMeshQuery_findStraightPath(self, *args)
    def initSlicedFindPath(self, *args): return _pyrecast.dtNavMeshQuery_initSlicedFindPath(self, *args)
    def updateSlicedFindPath(self, *args): return _pyrecast.dtNavMeshQuery_updateSlicedFindPath(self, *args)
    def finalizeSlicedFindPath(self, *args): return _pyrecast.dtNavMeshQuery_finalizeSlicedFindPath(self, *args)
    def finalizeSlicedFindPathPartial(self, *args): return _pyrecast.dtNavMeshQuery_finalizeSlicedFindPathPartial(self, *args)
    def findPolysAroundCircle(self, *args): return _pyrecast.dtNavMeshQuery_findPolysAroundCircle(self, *args)
    def findPolysAroundShape(self, *args): return _pyrecast.dtNavMeshQuery_findPolysAroundShape(self, *args)
    def findNearestPoly(self, *args): return _pyrecast.dtNavMeshQuery_findNearestPoly(self, *args)
    def queryPolygons(self, *args): return _pyrecast.dtNavMeshQuery_queryPolygons(self, *args)
    def findLocalNeighbourhood(self, *args): return _pyrecast.dtNavMeshQuery_findLocalNeighbourhood(self, *args)
    def moveAlongSurface(self, *args): return _pyrecast.dtNavMeshQuery_moveAlongSurface(self, *args)
    def raycast(self, *args): return _pyrecast.dtNavMeshQuery_raycast(self, *args)
    def findDistanceToWall(self, *args): return _pyrecast.dtNavMeshQuery_findDistanceToWall(self, *args)
    def getPolyWallSegments(self, *args): return _pyrecast.dtNavMeshQuery_getPolyWallSegments(self, *args)
    def findRandomPoint(self, *args): return _pyrecast.dtNavMeshQuery_findRandomPoint(self, *args)
    def findRandomPointAroundCircle(self, *args): return _pyrecast.dtNavMeshQuery_findRandomPointAroundCircle(self, *args)
    def closestPointOnPoly(self, *args): return _pyrecast.dtNavMeshQuery_closestPointOnPoly(self, *args)
    def closestPointOnPolyBoundary(self, *args): return _pyrecast.dtNavMeshQuery_closestPointOnPolyBoundary(self, *args)
    def getPolyHeight(self, *args): return _pyrecast.dtNavMeshQuery_getPolyHeight(self, *args)
    def isValidPolyRef(self, *args): return _pyrecast.dtNavMeshQuery_isValidPolyRef(self, *args)
    def isInClosedList(self, *args): return _pyrecast.dtNavMeshQuery_isInClosedList(self, *args)
    def getNodePool(self): return _pyrecast.dtNavMeshQuery_getNodePool(self)
    def getAttachedNavMesh(self): return _pyrecast.dtNavMeshQuery_getAttachedNavMesh(self)
dtNavMeshQuery_swigregister = _pyrecast.dtNavMeshQuery_swigregister
dtNavMeshQuery_swigregister(dtNavMeshQuery)


def dtAllocNavMeshQuery():
  return _pyrecast.dtAllocNavMeshQuery()
dtAllocNavMeshQuery = _pyrecast.dtAllocNavMeshQuery

def dtFreeNavMeshQuery(*args):
  return _pyrecast.dtFreeNavMeshQuery(*args)
dtFreeNavMeshQuery = _pyrecast.dtFreeNavMeshQuery
DT_NODE_OPEN = _pyrecast.DT_NODE_OPEN
DT_NODE_CLOSED = _pyrecast.DT_NODE_CLOSED
class dtNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pos"] = _pyrecast.dtNode_pos_set
    __swig_getmethods__["pos"] = _pyrecast.dtNode_pos_get
    if _newclass:pos = _swig_property(_pyrecast.dtNode_pos_get, _pyrecast.dtNode_pos_set)
    __swig_setmethods__["cost"] = _pyrecast.dtNode_cost_set
    __swig_getmethods__["cost"] = _pyrecast.dtNode_cost_get
    if _newclass:cost = _swig_property(_pyrecast.dtNode_cost_get, _pyrecast.dtNode_cost_set)
    __swig_setmethods__["total"] = _pyrecast.dtNode_total_set
    __swig_getmethods__["total"] = _pyrecast.dtNode_total_get
    if _newclass:total = _swig_property(_pyrecast.dtNode_total_get, _pyrecast.dtNode_total_set)
    __swig_setmethods__["pidx"] = _pyrecast.dtNode_pidx_set
    __swig_getmethods__["pidx"] = _pyrecast.dtNode_pidx_get
    if _newclass:pidx = _swig_property(_pyrecast.dtNode_pidx_get, _pyrecast.dtNode_pidx_set)
    __swig_setmethods__["flags"] = _pyrecast.dtNode_flags_set
    __swig_getmethods__["flags"] = _pyrecast.dtNode_flags_get
    if _newclass:flags = _swig_property(_pyrecast.dtNode_flags_get, _pyrecast.dtNode_flags_set)
    __swig_setmethods__["id"] = _pyrecast.dtNode_id_set
    __swig_getmethods__["id"] = _pyrecast.dtNode_id_get
    if _newclass:id = _swig_property(_pyrecast.dtNode_id_get, _pyrecast.dtNode_id_set)
    def __init__(self): 
        this = _pyrecast.new_dtNode()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtNode
    __del__ = lambda self : None;
dtNode_swigregister = _pyrecast.dtNode_swigregister
dtNode_swigregister(dtNode)
DT_NULL_IDX = cvar.DT_NULL_IDX

class dtNodePool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtNodePool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtNodePool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyrecast.new_dtNodePool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtNodePool
    __del__ = lambda self : None;
    def clear(self): return _pyrecast.dtNodePool_clear(self)
    def getNode(self, *args): return _pyrecast.dtNodePool_getNode(self, *args)
    def findNode(self, *args): return _pyrecast.dtNodePool_findNode(self, *args)
    def getNodeIdx(self, *args): return _pyrecast.dtNodePool_getNodeIdx(self, *args)
    def getNodeAtIdx(self, *args): return _pyrecast.dtNodePool_getNodeAtIdx(self, *args)
    def getMemUsed(self): return _pyrecast.dtNodePool_getMemUsed(self)
    def getMaxNodes(self): return _pyrecast.dtNodePool_getMaxNodes(self)
    def getHashSize(self): return _pyrecast.dtNodePool_getHashSize(self)
    def getFirst(self, *args): return _pyrecast.dtNodePool_getFirst(self, *args)
    def getNext(self, *args): return _pyrecast.dtNodePool_getNext(self, *args)
dtNodePool_swigregister = _pyrecast.dtNodePool_swigregister
dtNodePool_swigregister(dtNodePool)

class dtNodeQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtNodeQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtNodeQueue, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyrecast.new_dtNodeQueue(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtNodeQueue
    __del__ = lambda self : None;
    def clear(self): return _pyrecast.dtNodeQueue_clear(self)
    def top(self): return _pyrecast.dtNodeQueue_top(self)
    def pop(self): return _pyrecast.dtNodeQueue_pop(self)
    def push(self, *args): return _pyrecast.dtNodeQueue_push(self, *args)
    def modify(self, *args): return _pyrecast.dtNodeQueue_modify(self, *args)
    def empty(self): return _pyrecast.dtNodeQueue_empty(self)
    def getMemUsed(self): return _pyrecast.dtNodeQueue_getMemUsed(self)
    def getCapacity(self): return _pyrecast.dtNodeQueue_getCapacity(self)
dtNodeQueue_swigregister = _pyrecast.dtNodeQueue_swigregister
dtNodeQueue_swigregister(dtNodeQueue)

class dtCrowdNeighbour(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtCrowdNeighbour, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtCrowdNeighbour, name)
    __repr__ = _swig_repr
    __swig_setmethods__["idx"] = _pyrecast.dtCrowdNeighbour_idx_set
    __swig_getmethods__["idx"] = _pyrecast.dtCrowdNeighbour_idx_get
    if _newclass:idx = _swig_property(_pyrecast.dtCrowdNeighbour_idx_get, _pyrecast.dtCrowdNeighbour_idx_set)
    __swig_setmethods__["dist"] = _pyrecast.dtCrowdNeighbour_dist_set
    __swig_getmethods__["dist"] = _pyrecast.dtCrowdNeighbour_dist_get
    if _newclass:dist = _swig_property(_pyrecast.dtCrowdNeighbour_dist_get, _pyrecast.dtCrowdNeighbour_dist_set)
    def __init__(self): 
        this = _pyrecast.new_dtCrowdNeighbour()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtCrowdNeighbour
    __del__ = lambda self : None;
dtCrowdNeighbour_swigregister = _pyrecast.dtCrowdNeighbour_swigregister
dtCrowdNeighbour_swigregister(dtCrowdNeighbour)
DT_CROWDAGENT_MAX_NEIGHBOURS = cvar.DT_CROWDAGENT_MAX_NEIGHBOURS
DT_CROWDAGENT_MAX_CORNERS = cvar.DT_CROWDAGENT_MAX_CORNERS
DT_CROWD_MAX_OBSTAVOIDANCE_PARAMS = cvar.DT_CROWD_MAX_OBSTAVOIDANCE_PARAMS

DT_CROWDAGENT_STATE_INVALID = _pyrecast.DT_CROWDAGENT_STATE_INVALID
DT_CROWDAGENT_STATE_WALKING = _pyrecast.DT_CROWDAGENT_STATE_WALKING
DT_CROWDAGENT_STATE_OFFMESH = _pyrecast.DT_CROWDAGENT_STATE_OFFMESH
class dtCrowdAgentParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtCrowdAgentParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtCrowdAgentParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radius"] = _pyrecast.dtCrowdAgentParams_radius_set
    __swig_getmethods__["radius"] = _pyrecast.dtCrowdAgentParams_radius_get
    if _newclass:radius = _swig_property(_pyrecast.dtCrowdAgentParams_radius_get, _pyrecast.dtCrowdAgentParams_radius_set)
    __swig_setmethods__["height"] = _pyrecast.dtCrowdAgentParams_height_set
    __swig_getmethods__["height"] = _pyrecast.dtCrowdAgentParams_height_get
    if _newclass:height = _swig_property(_pyrecast.dtCrowdAgentParams_height_get, _pyrecast.dtCrowdAgentParams_height_set)
    __swig_setmethods__["maxAcceleration"] = _pyrecast.dtCrowdAgentParams_maxAcceleration_set
    __swig_getmethods__["maxAcceleration"] = _pyrecast.dtCrowdAgentParams_maxAcceleration_get
    if _newclass:maxAcceleration = _swig_property(_pyrecast.dtCrowdAgentParams_maxAcceleration_get, _pyrecast.dtCrowdAgentParams_maxAcceleration_set)
    __swig_setmethods__["maxSpeed"] = _pyrecast.dtCrowdAgentParams_maxSpeed_set
    __swig_getmethods__["maxSpeed"] = _pyrecast.dtCrowdAgentParams_maxSpeed_get
    if _newclass:maxSpeed = _swig_property(_pyrecast.dtCrowdAgentParams_maxSpeed_get, _pyrecast.dtCrowdAgentParams_maxSpeed_set)
    __swig_setmethods__["collisionQueryRange"] = _pyrecast.dtCrowdAgentParams_collisionQueryRange_set
    __swig_getmethods__["collisionQueryRange"] = _pyrecast.dtCrowdAgentParams_collisionQueryRange_get
    if _newclass:collisionQueryRange = _swig_property(_pyrecast.dtCrowdAgentParams_collisionQueryRange_get, _pyrecast.dtCrowdAgentParams_collisionQueryRange_set)
    __swig_setmethods__["pathOptimizationRange"] = _pyrecast.dtCrowdAgentParams_pathOptimizationRange_set
    __swig_getmethods__["pathOptimizationRange"] = _pyrecast.dtCrowdAgentParams_pathOptimizationRange_get
    if _newclass:pathOptimizationRange = _swig_property(_pyrecast.dtCrowdAgentParams_pathOptimizationRange_get, _pyrecast.dtCrowdAgentParams_pathOptimizationRange_set)
    __swig_setmethods__["separationWeight"] = _pyrecast.dtCrowdAgentParams_separationWeight_set
    __swig_getmethods__["separationWeight"] = _pyrecast.dtCrowdAgentParams_separationWeight_get
    if _newclass:separationWeight = _swig_property(_pyrecast.dtCrowdAgentParams_separationWeight_get, _pyrecast.dtCrowdAgentParams_separationWeight_set)
    __swig_setmethods__["updateFlags"] = _pyrecast.dtCrowdAgentParams_updateFlags_set
    __swig_getmethods__["updateFlags"] = _pyrecast.dtCrowdAgentParams_updateFlags_get
    if _newclass:updateFlags = _swig_property(_pyrecast.dtCrowdAgentParams_updateFlags_get, _pyrecast.dtCrowdAgentParams_updateFlags_set)
    __swig_setmethods__["obstacleAvoidanceType"] = _pyrecast.dtCrowdAgentParams_obstacleAvoidanceType_set
    __swig_getmethods__["obstacleAvoidanceType"] = _pyrecast.dtCrowdAgentParams_obstacleAvoidanceType_get
    if _newclass:obstacleAvoidanceType = _swig_property(_pyrecast.dtCrowdAgentParams_obstacleAvoidanceType_get, _pyrecast.dtCrowdAgentParams_obstacleAvoidanceType_set)
    __swig_setmethods__["userData"] = _pyrecast.dtCrowdAgentParams_userData_set
    __swig_getmethods__["userData"] = _pyrecast.dtCrowdAgentParams_userData_get
    if _newclass:userData = _swig_property(_pyrecast.dtCrowdAgentParams_userData_get, _pyrecast.dtCrowdAgentParams_userData_set)
    def __init__(self): 
        this = _pyrecast.new_dtCrowdAgentParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtCrowdAgentParams
    __del__ = lambda self : None;
dtCrowdAgentParams_swigregister = _pyrecast.dtCrowdAgentParams_swigregister
dtCrowdAgentParams_swigregister(dtCrowdAgentParams)

DT_CROWDAGENT_TARGET_NONE = _pyrecast.DT_CROWDAGENT_TARGET_NONE
DT_CROWDAGENT_TARGET_FAILED = _pyrecast.DT_CROWDAGENT_TARGET_FAILED
DT_CROWDAGENT_TARGET_VALID = _pyrecast.DT_CROWDAGENT_TARGET_VALID
DT_CROWDAGENT_TARGET_REQUESTING = _pyrecast.DT_CROWDAGENT_TARGET_REQUESTING
DT_CROWDAGENT_TARGET_WAITING_FOR_QUEUE = _pyrecast.DT_CROWDAGENT_TARGET_WAITING_FOR_QUEUE
DT_CROWDAGENT_TARGET_WAITING_FOR_PATH = _pyrecast.DT_CROWDAGENT_TARGET_WAITING_FOR_PATH
DT_CROWDAGENT_TARGET_VELOCITY = _pyrecast.DT_CROWDAGENT_TARGET_VELOCITY
class dtCrowdAgent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtCrowdAgent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtCrowdAgent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["active"] = _pyrecast.dtCrowdAgent_active_set
    __swig_getmethods__["active"] = _pyrecast.dtCrowdAgent_active_get
    if _newclass:active = _swig_property(_pyrecast.dtCrowdAgent_active_get, _pyrecast.dtCrowdAgent_active_set)
    __swig_setmethods__["state"] = _pyrecast.dtCrowdAgent_state_set
    __swig_getmethods__["state"] = _pyrecast.dtCrowdAgent_state_get
    if _newclass:state = _swig_property(_pyrecast.dtCrowdAgent_state_get, _pyrecast.dtCrowdAgent_state_set)
    __swig_setmethods__["corridor"] = _pyrecast.dtCrowdAgent_corridor_set
    __swig_getmethods__["corridor"] = _pyrecast.dtCrowdAgent_corridor_get
    if _newclass:corridor = _swig_property(_pyrecast.dtCrowdAgent_corridor_get, _pyrecast.dtCrowdAgent_corridor_set)
    __swig_setmethods__["boundary"] = _pyrecast.dtCrowdAgent_boundary_set
    __swig_getmethods__["boundary"] = _pyrecast.dtCrowdAgent_boundary_get
    if _newclass:boundary = _swig_property(_pyrecast.dtCrowdAgent_boundary_get, _pyrecast.dtCrowdAgent_boundary_set)
    __swig_setmethods__["topologyOptTime"] = _pyrecast.dtCrowdAgent_topologyOptTime_set
    __swig_getmethods__["topologyOptTime"] = _pyrecast.dtCrowdAgent_topologyOptTime_get
    if _newclass:topologyOptTime = _swig_property(_pyrecast.dtCrowdAgent_topologyOptTime_get, _pyrecast.dtCrowdAgent_topologyOptTime_set)
    __swig_setmethods__["neis"] = _pyrecast.dtCrowdAgent_neis_set
    __swig_getmethods__["neis"] = _pyrecast.dtCrowdAgent_neis_get
    if _newclass:neis = _swig_property(_pyrecast.dtCrowdAgent_neis_get, _pyrecast.dtCrowdAgent_neis_set)
    __swig_setmethods__["nneis"] = _pyrecast.dtCrowdAgent_nneis_set
    __swig_getmethods__["nneis"] = _pyrecast.dtCrowdAgent_nneis_get
    if _newclass:nneis = _swig_property(_pyrecast.dtCrowdAgent_nneis_get, _pyrecast.dtCrowdAgent_nneis_set)
    __swig_setmethods__["desiredSpeed"] = _pyrecast.dtCrowdAgent_desiredSpeed_set
    __swig_getmethods__["desiredSpeed"] = _pyrecast.dtCrowdAgent_desiredSpeed_get
    if _newclass:desiredSpeed = _swig_property(_pyrecast.dtCrowdAgent_desiredSpeed_get, _pyrecast.dtCrowdAgent_desiredSpeed_set)
    __swig_setmethods__["npos"] = _pyrecast.dtCrowdAgent_npos_set
    __swig_getmethods__["npos"] = _pyrecast.dtCrowdAgent_npos_get
    if _newclass:npos = _swig_property(_pyrecast.dtCrowdAgent_npos_get, _pyrecast.dtCrowdAgent_npos_set)
    __swig_setmethods__["disp"] = _pyrecast.dtCrowdAgent_disp_set
    __swig_getmethods__["disp"] = _pyrecast.dtCrowdAgent_disp_get
    if _newclass:disp = _swig_property(_pyrecast.dtCrowdAgent_disp_get, _pyrecast.dtCrowdAgent_disp_set)
    __swig_setmethods__["dvel"] = _pyrecast.dtCrowdAgent_dvel_set
    __swig_getmethods__["dvel"] = _pyrecast.dtCrowdAgent_dvel_get
    if _newclass:dvel = _swig_property(_pyrecast.dtCrowdAgent_dvel_get, _pyrecast.dtCrowdAgent_dvel_set)
    __swig_setmethods__["nvel"] = _pyrecast.dtCrowdAgent_nvel_set
    __swig_getmethods__["nvel"] = _pyrecast.dtCrowdAgent_nvel_get
    if _newclass:nvel = _swig_property(_pyrecast.dtCrowdAgent_nvel_get, _pyrecast.dtCrowdAgent_nvel_set)
    __swig_setmethods__["vel"] = _pyrecast.dtCrowdAgent_vel_set
    __swig_getmethods__["vel"] = _pyrecast.dtCrowdAgent_vel_get
    if _newclass:vel = _swig_property(_pyrecast.dtCrowdAgent_vel_get, _pyrecast.dtCrowdAgent_vel_set)
    __swig_setmethods__["params"] = _pyrecast.dtCrowdAgent_params_set
    __swig_getmethods__["params"] = _pyrecast.dtCrowdAgent_params_get
    if _newclass:params = _swig_property(_pyrecast.dtCrowdAgent_params_get, _pyrecast.dtCrowdAgent_params_set)
    __swig_setmethods__["cornerVerts"] = _pyrecast.dtCrowdAgent_cornerVerts_set
    __swig_getmethods__["cornerVerts"] = _pyrecast.dtCrowdAgent_cornerVerts_get
    if _newclass:cornerVerts = _swig_property(_pyrecast.dtCrowdAgent_cornerVerts_get, _pyrecast.dtCrowdAgent_cornerVerts_set)
    __swig_setmethods__["cornerFlags"] = _pyrecast.dtCrowdAgent_cornerFlags_set
    __swig_getmethods__["cornerFlags"] = _pyrecast.dtCrowdAgent_cornerFlags_get
    if _newclass:cornerFlags = _swig_property(_pyrecast.dtCrowdAgent_cornerFlags_get, _pyrecast.dtCrowdAgent_cornerFlags_set)
    __swig_setmethods__["cornerPolys"] = _pyrecast.dtCrowdAgent_cornerPolys_set
    __swig_getmethods__["cornerPolys"] = _pyrecast.dtCrowdAgent_cornerPolys_get
    if _newclass:cornerPolys = _swig_property(_pyrecast.dtCrowdAgent_cornerPolys_get, _pyrecast.dtCrowdAgent_cornerPolys_set)
    __swig_setmethods__["ncorners"] = _pyrecast.dtCrowdAgent_ncorners_set
    __swig_getmethods__["ncorners"] = _pyrecast.dtCrowdAgent_ncorners_get
    if _newclass:ncorners = _swig_property(_pyrecast.dtCrowdAgent_ncorners_get, _pyrecast.dtCrowdAgent_ncorners_set)
    __swig_setmethods__["targetState"] = _pyrecast.dtCrowdAgent_targetState_set
    __swig_getmethods__["targetState"] = _pyrecast.dtCrowdAgent_targetState_get
    if _newclass:targetState = _swig_property(_pyrecast.dtCrowdAgent_targetState_get, _pyrecast.dtCrowdAgent_targetState_set)
    __swig_setmethods__["targetRef"] = _pyrecast.dtCrowdAgent_targetRef_set
    __swig_getmethods__["targetRef"] = _pyrecast.dtCrowdAgent_targetRef_get
    if _newclass:targetRef = _swig_property(_pyrecast.dtCrowdAgent_targetRef_get, _pyrecast.dtCrowdAgent_targetRef_set)
    __swig_setmethods__["targetPos"] = _pyrecast.dtCrowdAgent_targetPos_set
    __swig_getmethods__["targetPos"] = _pyrecast.dtCrowdAgent_targetPos_get
    if _newclass:targetPos = _swig_property(_pyrecast.dtCrowdAgent_targetPos_get, _pyrecast.dtCrowdAgent_targetPos_set)
    __swig_setmethods__["targetPathqRef"] = _pyrecast.dtCrowdAgent_targetPathqRef_set
    __swig_getmethods__["targetPathqRef"] = _pyrecast.dtCrowdAgent_targetPathqRef_get
    if _newclass:targetPathqRef = _swig_property(_pyrecast.dtCrowdAgent_targetPathqRef_get, _pyrecast.dtCrowdAgent_targetPathqRef_set)
    __swig_setmethods__["targetReplan"] = _pyrecast.dtCrowdAgent_targetReplan_set
    __swig_getmethods__["targetReplan"] = _pyrecast.dtCrowdAgent_targetReplan_get
    if _newclass:targetReplan = _swig_property(_pyrecast.dtCrowdAgent_targetReplan_get, _pyrecast.dtCrowdAgent_targetReplan_set)
    __swig_setmethods__["targetReplanTime"] = _pyrecast.dtCrowdAgent_targetReplanTime_set
    __swig_getmethods__["targetReplanTime"] = _pyrecast.dtCrowdAgent_targetReplanTime_get
    if _newclass:targetReplanTime = _swig_property(_pyrecast.dtCrowdAgent_targetReplanTime_get, _pyrecast.dtCrowdAgent_targetReplanTime_set)
    def __init__(self): 
        this = _pyrecast.new_dtCrowdAgent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtCrowdAgent
    __del__ = lambda self : None;
dtCrowdAgent_swigregister = _pyrecast.dtCrowdAgent_swigregister
dtCrowdAgent_swigregister(dtCrowdAgent)

class dtCrowdAgentAnimation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtCrowdAgentAnimation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtCrowdAgentAnimation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["active"] = _pyrecast.dtCrowdAgentAnimation_active_set
    __swig_getmethods__["active"] = _pyrecast.dtCrowdAgentAnimation_active_get
    if _newclass:active = _swig_property(_pyrecast.dtCrowdAgentAnimation_active_get, _pyrecast.dtCrowdAgentAnimation_active_set)
    __swig_setmethods__["initPos"] = _pyrecast.dtCrowdAgentAnimation_initPos_set
    __swig_getmethods__["initPos"] = _pyrecast.dtCrowdAgentAnimation_initPos_get
    if _newclass:initPos = _swig_property(_pyrecast.dtCrowdAgentAnimation_initPos_get, _pyrecast.dtCrowdAgentAnimation_initPos_set)
    __swig_setmethods__["startPos"] = _pyrecast.dtCrowdAgentAnimation_startPos_set
    __swig_getmethods__["startPos"] = _pyrecast.dtCrowdAgentAnimation_startPos_get
    if _newclass:startPos = _swig_property(_pyrecast.dtCrowdAgentAnimation_startPos_get, _pyrecast.dtCrowdAgentAnimation_startPos_set)
    __swig_setmethods__["endPos"] = _pyrecast.dtCrowdAgentAnimation_endPos_set
    __swig_getmethods__["endPos"] = _pyrecast.dtCrowdAgentAnimation_endPos_get
    if _newclass:endPos = _swig_property(_pyrecast.dtCrowdAgentAnimation_endPos_get, _pyrecast.dtCrowdAgentAnimation_endPos_set)
    __swig_setmethods__["polyRef"] = _pyrecast.dtCrowdAgentAnimation_polyRef_set
    __swig_getmethods__["polyRef"] = _pyrecast.dtCrowdAgentAnimation_polyRef_get
    if _newclass:polyRef = _swig_property(_pyrecast.dtCrowdAgentAnimation_polyRef_get, _pyrecast.dtCrowdAgentAnimation_polyRef_set)
    __swig_setmethods__["t"] = _pyrecast.dtCrowdAgentAnimation_t_set
    __swig_getmethods__["t"] = _pyrecast.dtCrowdAgentAnimation_t_get
    if _newclass:t = _swig_property(_pyrecast.dtCrowdAgentAnimation_t_get, _pyrecast.dtCrowdAgentAnimation_t_set)
    __swig_setmethods__["tmax"] = _pyrecast.dtCrowdAgentAnimation_tmax_set
    __swig_getmethods__["tmax"] = _pyrecast.dtCrowdAgentAnimation_tmax_get
    if _newclass:tmax = _swig_property(_pyrecast.dtCrowdAgentAnimation_tmax_get, _pyrecast.dtCrowdAgentAnimation_tmax_set)
    def __init__(self): 
        this = _pyrecast.new_dtCrowdAgentAnimation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtCrowdAgentAnimation
    __del__ = lambda self : None;
dtCrowdAgentAnimation_swigregister = _pyrecast.dtCrowdAgentAnimation_swigregister
dtCrowdAgentAnimation_swigregister(dtCrowdAgentAnimation)

DT_CROWD_ANTICIPATE_TURNS = _pyrecast.DT_CROWD_ANTICIPATE_TURNS
DT_CROWD_OBSTACLE_AVOIDANCE = _pyrecast.DT_CROWD_OBSTACLE_AVOIDANCE
DT_CROWD_SEPARATION = _pyrecast.DT_CROWD_SEPARATION
DT_CROWD_OPTIMIZE_VIS = _pyrecast.DT_CROWD_OPTIMIZE_VIS
DT_CROWD_OPTIMIZE_TOPO = _pyrecast.DT_CROWD_OPTIMIZE_TOPO
class dtCrowdAgentDebugInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtCrowdAgentDebugInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtCrowdAgentDebugInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["idx"] = _pyrecast.dtCrowdAgentDebugInfo_idx_set
    __swig_getmethods__["idx"] = _pyrecast.dtCrowdAgentDebugInfo_idx_get
    if _newclass:idx = _swig_property(_pyrecast.dtCrowdAgentDebugInfo_idx_get, _pyrecast.dtCrowdAgentDebugInfo_idx_set)
    __swig_setmethods__["optStart"] = _pyrecast.dtCrowdAgentDebugInfo_optStart_set
    __swig_getmethods__["optStart"] = _pyrecast.dtCrowdAgentDebugInfo_optStart_get
    if _newclass:optStart = _swig_property(_pyrecast.dtCrowdAgentDebugInfo_optStart_get, _pyrecast.dtCrowdAgentDebugInfo_optStart_set)
    __swig_setmethods__["optEnd"] = _pyrecast.dtCrowdAgentDebugInfo_optEnd_set
    __swig_getmethods__["optEnd"] = _pyrecast.dtCrowdAgentDebugInfo_optEnd_get
    if _newclass:optEnd = _swig_property(_pyrecast.dtCrowdAgentDebugInfo_optEnd_get, _pyrecast.dtCrowdAgentDebugInfo_optEnd_set)
    __swig_setmethods__["vod"] = _pyrecast.dtCrowdAgentDebugInfo_vod_set
    __swig_getmethods__["vod"] = _pyrecast.dtCrowdAgentDebugInfo_vod_get
    if _newclass:vod = _swig_property(_pyrecast.dtCrowdAgentDebugInfo_vod_get, _pyrecast.dtCrowdAgentDebugInfo_vod_set)
    def __init__(self): 
        this = _pyrecast.new_dtCrowdAgentDebugInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtCrowdAgentDebugInfo
    __del__ = lambda self : None;
dtCrowdAgentDebugInfo_swigregister = _pyrecast.dtCrowdAgentDebugInfo_swigregister
dtCrowdAgentDebugInfo_swigregister(dtCrowdAgentDebugInfo)

class dtCrowd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtCrowd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtCrowd, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyrecast.new_dtCrowd()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtCrowd
    __del__ = lambda self : None;
    def init(self, *args): return _pyrecast.dtCrowd_init(self, *args)
    def setObstacleAvoidanceParams(self, *args): return _pyrecast.dtCrowd_setObstacleAvoidanceParams(self, *args)
    def getObstacleAvoidanceParams(self, *args): return _pyrecast.dtCrowd_getObstacleAvoidanceParams(self, *args)
    def getAgent(self, *args): return _pyrecast.dtCrowd_getAgent(self, *args)
    def getAgentCount(self): return _pyrecast.dtCrowd_getAgentCount(self)
    def addAgent(self, *args): return _pyrecast.dtCrowd_addAgent(self, *args)
    def updateAgentParameters(self, *args): return _pyrecast.dtCrowd_updateAgentParameters(self, *args)
    def removeAgent(self, *args): return _pyrecast.dtCrowd_removeAgent(self, *args)
    def requestMoveTarget(self, *args): return _pyrecast.dtCrowd_requestMoveTarget(self, *args)
    def requestMoveVelocity(self, *args): return _pyrecast.dtCrowd_requestMoveVelocity(self, *args)
    def resetMoveTarget(self, *args): return _pyrecast.dtCrowd_resetMoveTarget(self, *args)
    def getActiveAgents(self, *args): return _pyrecast.dtCrowd_getActiveAgents(self, *args)
    def update(self, *args): return _pyrecast.dtCrowd_update(self, *args)
    def getFilter(self): return _pyrecast.dtCrowd_getFilter(self)
    def getEditableFilter(self): return _pyrecast.dtCrowd_getEditableFilter(self)
    def getQueryExtents(self): return _pyrecast.dtCrowd_getQueryExtents(self)
    def getVelocitySampleCount(self): return _pyrecast.dtCrowd_getVelocitySampleCount(self)
    def getGrid(self): return _pyrecast.dtCrowd_getGrid(self)
    def getPathQueue(self): return _pyrecast.dtCrowd_getPathQueue(self)
    def getNavMeshQuery(self): return _pyrecast.dtCrowd_getNavMeshQuery(self)
dtCrowd_swigregister = _pyrecast.dtCrowd_swigregister
dtCrowd_swigregister(dtCrowd)


def dtAllocCrowd():
  return _pyrecast.dtAllocCrowd()
dtAllocCrowd = _pyrecast.dtAllocCrowd

def dtFreeCrowd(*args):
  return _pyrecast.dtFreeCrowd(*args)
dtFreeCrowd = _pyrecast.dtFreeCrowd
class dtLocalBoundary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtLocalBoundary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtLocalBoundary, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyrecast.new_dtLocalBoundary()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtLocalBoundary
    __del__ = lambda self : None;
    def reset(self): return _pyrecast.dtLocalBoundary_reset(self)
    def update(self, *args): return _pyrecast.dtLocalBoundary_update(self, *args)
    def isValid(self, *args): return _pyrecast.dtLocalBoundary_isValid(self, *args)
    def getCenter(self): return _pyrecast.dtLocalBoundary_getCenter(self)
    def getSegmentCount(self): return _pyrecast.dtLocalBoundary_getSegmentCount(self)
    def getSegment(self, *args): return _pyrecast.dtLocalBoundary_getSegment(self, *args)
dtLocalBoundary_swigregister = _pyrecast.dtLocalBoundary_swigregister
dtLocalBoundary_swigregister(dtLocalBoundary)

class dtObstacleCircle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtObstacleCircle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtObstacleCircle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _pyrecast.dtObstacleCircle_p_set
    __swig_getmethods__["p"] = _pyrecast.dtObstacleCircle_p_get
    if _newclass:p = _swig_property(_pyrecast.dtObstacleCircle_p_get, _pyrecast.dtObstacleCircle_p_set)
    __swig_setmethods__["vel"] = _pyrecast.dtObstacleCircle_vel_set
    __swig_getmethods__["vel"] = _pyrecast.dtObstacleCircle_vel_get
    if _newclass:vel = _swig_property(_pyrecast.dtObstacleCircle_vel_get, _pyrecast.dtObstacleCircle_vel_set)
    __swig_setmethods__["dvel"] = _pyrecast.dtObstacleCircle_dvel_set
    __swig_getmethods__["dvel"] = _pyrecast.dtObstacleCircle_dvel_get
    if _newclass:dvel = _swig_property(_pyrecast.dtObstacleCircle_dvel_get, _pyrecast.dtObstacleCircle_dvel_set)
    __swig_setmethods__["rad"] = _pyrecast.dtObstacleCircle_rad_set
    __swig_getmethods__["rad"] = _pyrecast.dtObstacleCircle_rad_get
    if _newclass:rad = _swig_property(_pyrecast.dtObstacleCircle_rad_get, _pyrecast.dtObstacleCircle_rad_set)
    __swig_setmethods__["dp"] = _pyrecast.dtObstacleCircle_dp_set
    __swig_getmethods__["dp"] = _pyrecast.dtObstacleCircle_dp_get
    if _newclass:dp = _swig_property(_pyrecast.dtObstacleCircle_dp_get, _pyrecast.dtObstacleCircle_dp_set)
    __swig_setmethods__["np"] = _pyrecast.dtObstacleCircle_np_set
    __swig_getmethods__["np"] = _pyrecast.dtObstacleCircle_np_get
    if _newclass:np = _swig_property(_pyrecast.dtObstacleCircle_np_get, _pyrecast.dtObstacleCircle_np_set)
    def __init__(self): 
        this = _pyrecast.new_dtObstacleCircle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtObstacleCircle
    __del__ = lambda self : None;
dtObstacleCircle_swigregister = _pyrecast.dtObstacleCircle_swigregister
dtObstacleCircle_swigregister(dtObstacleCircle)

class dtObstacleSegment(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtObstacleSegment, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtObstacleSegment, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p"] = _pyrecast.dtObstacleSegment_p_set
    __swig_getmethods__["p"] = _pyrecast.dtObstacleSegment_p_get
    if _newclass:p = _swig_property(_pyrecast.dtObstacleSegment_p_get, _pyrecast.dtObstacleSegment_p_set)
    __swig_setmethods__["q"] = _pyrecast.dtObstacleSegment_q_set
    __swig_getmethods__["q"] = _pyrecast.dtObstacleSegment_q_get
    if _newclass:q = _swig_property(_pyrecast.dtObstacleSegment_q_get, _pyrecast.dtObstacleSegment_q_set)
    __swig_setmethods__["touch"] = _pyrecast.dtObstacleSegment_touch_set
    __swig_getmethods__["touch"] = _pyrecast.dtObstacleSegment_touch_get
    if _newclass:touch = _swig_property(_pyrecast.dtObstacleSegment_touch_get, _pyrecast.dtObstacleSegment_touch_set)
    def __init__(self): 
        this = _pyrecast.new_dtObstacleSegment()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtObstacleSegment
    __del__ = lambda self : None;
dtObstacleSegment_swigregister = _pyrecast.dtObstacleSegment_swigregister
dtObstacleSegment_swigregister(dtObstacleSegment)

class dtObstacleAvoidanceDebugData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtObstacleAvoidanceDebugData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtObstacleAvoidanceDebugData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyrecast.new_dtObstacleAvoidanceDebugData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtObstacleAvoidanceDebugData
    __del__ = lambda self : None;
    def init(self, *args): return _pyrecast.dtObstacleAvoidanceDebugData_init(self, *args)
    def reset(self): return _pyrecast.dtObstacleAvoidanceDebugData_reset(self)
    def addSample(self, *args): return _pyrecast.dtObstacleAvoidanceDebugData_addSample(self, *args)
    def normalizeSamples(self): return _pyrecast.dtObstacleAvoidanceDebugData_normalizeSamples(self)
    def getSampleCount(self): return _pyrecast.dtObstacleAvoidanceDebugData_getSampleCount(self)
    def getSampleVelocity(self, *args): return _pyrecast.dtObstacleAvoidanceDebugData_getSampleVelocity(self, *args)
    def getSampleSize(self, *args): return _pyrecast.dtObstacleAvoidanceDebugData_getSampleSize(self, *args)
    def getSamplePenalty(self, *args): return _pyrecast.dtObstacleAvoidanceDebugData_getSamplePenalty(self, *args)
    def getSampleDesiredVelocityPenalty(self, *args): return _pyrecast.dtObstacleAvoidanceDebugData_getSampleDesiredVelocityPenalty(self, *args)
    def getSampleCurrentVelocityPenalty(self, *args): return _pyrecast.dtObstacleAvoidanceDebugData_getSampleCurrentVelocityPenalty(self, *args)
    def getSamplePreferredSidePenalty(self, *args): return _pyrecast.dtObstacleAvoidanceDebugData_getSamplePreferredSidePenalty(self, *args)
    def getSampleCollisionTimePenalty(self, *args): return _pyrecast.dtObstacleAvoidanceDebugData_getSampleCollisionTimePenalty(self, *args)
dtObstacleAvoidanceDebugData_swigregister = _pyrecast.dtObstacleAvoidanceDebugData_swigregister
dtObstacleAvoidanceDebugData_swigregister(dtObstacleAvoidanceDebugData)


def dtAllocObstacleAvoidanceDebugData():
  return _pyrecast.dtAllocObstacleAvoidanceDebugData()
dtAllocObstacleAvoidanceDebugData = _pyrecast.dtAllocObstacleAvoidanceDebugData

def dtFreeObstacleAvoidanceDebugData(*args):
  return _pyrecast.dtFreeObstacleAvoidanceDebugData(*args)
dtFreeObstacleAvoidanceDebugData = _pyrecast.dtFreeObstacleAvoidanceDebugData
class dtObstacleAvoidanceParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtObstacleAvoidanceParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtObstacleAvoidanceParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["velBias"] = _pyrecast.dtObstacleAvoidanceParams_velBias_set
    __swig_getmethods__["velBias"] = _pyrecast.dtObstacleAvoidanceParams_velBias_get
    if _newclass:velBias = _swig_property(_pyrecast.dtObstacleAvoidanceParams_velBias_get, _pyrecast.dtObstacleAvoidanceParams_velBias_set)
    __swig_setmethods__["weightDesVel"] = _pyrecast.dtObstacleAvoidanceParams_weightDesVel_set
    __swig_getmethods__["weightDesVel"] = _pyrecast.dtObstacleAvoidanceParams_weightDesVel_get
    if _newclass:weightDesVel = _swig_property(_pyrecast.dtObstacleAvoidanceParams_weightDesVel_get, _pyrecast.dtObstacleAvoidanceParams_weightDesVel_set)
    __swig_setmethods__["weightCurVel"] = _pyrecast.dtObstacleAvoidanceParams_weightCurVel_set
    __swig_getmethods__["weightCurVel"] = _pyrecast.dtObstacleAvoidanceParams_weightCurVel_get
    if _newclass:weightCurVel = _swig_property(_pyrecast.dtObstacleAvoidanceParams_weightCurVel_get, _pyrecast.dtObstacleAvoidanceParams_weightCurVel_set)
    __swig_setmethods__["weightSide"] = _pyrecast.dtObstacleAvoidanceParams_weightSide_set
    __swig_getmethods__["weightSide"] = _pyrecast.dtObstacleAvoidanceParams_weightSide_get
    if _newclass:weightSide = _swig_property(_pyrecast.dtObstacleAvoidanceParams_weightSide_get, _pyrecast.dtObstacleAvoidanceParams_weightSide_set)
    __swig_setmethods__["weightToi"] = _pyrecast.dtObstacleAvoidanceParams_weightToi_set
    __swig_getmethods__["weightToi"] = _pyrecast.dtObstacleAvoidanceParams_weightToi_get
    if _newclass:weightToi = _swig_property(_pyrecast.dtObstacleAvoidanceParams_weightToi_get, _pyrecast.dtObstacleAvoidanceParams_weightToi_set)
    __swig_setmethods__["horizTime"] = _pyrecast.dtObstacleAvoidanceParams_horizTime_set
    __swig_getmethods__["horizTime"] = _pyrecast.dtObstacleAvoidanceParams_horizTime_get
    if _newclass:horizTime = _swig_property(_pyrecast.dtObstacleAvoidanceParams_horizTime_get, _pyrecast.dtObstacleAvoidanceParams_horizTime_set)
    __swig_setmethods__["gridSize"] = _pyrecast.dtObstacleAvoidanceParams_gridSize_set
    __swig_getmethods__["gridSize"] = _pyrecast.dtObstacleAvoidanceParams_gridSize_get
    if _newclass:gridSize = _swig_property(_pyrecast.dtObstacleAvoidanceParams_gridSize_get, _pyrecast.dtObstacleAvoidanceParams_gridSize_set)
    __swig_setmethods__["adaptiveDivs"] = _pyrecast.dtObstacleAvoidanceParams_adaptiveDivs_set
    __swig_getmethods__["adaptiveDivs"] = _pyrecast.dtObstacleAvoidanceParams_adaptiveDivs_get
    if _newclass:adaptiveDivs = _swig_property(_pyrecast.dtObstacleAvoidanceParams_adaptiveDivs_get, _pyrecast.dtObstacleAvoidanceParams_adaptiveDivs_set)
    __swig_setmethods__["adaptiveRings"] = _pyrecast.dtObstacleAvoidanceParams_adaptiveRings_set
    __swig_getmethods__["adaptiveRings"] = _pyrecast.dtObstacleAvoidanceParams_adaptiveRings_get
    if _newclass:adaptiveRings = _swig_property(_pyrecast.dtObstacleAvoidanceParams_adaptiveRings_get, _pyrecast.dtObstacleAvoidanceParams_adaptiveRings_set)
    __swig_setmethods__["adaptiveDepth"] = _pyrecast.dtObstacleAvoidanceParams_adaptiveDepth_set
    __swig_getmethods__["adaptiveDepth"] = _pyrecast.dtObstacleAvoidanceParams_adaptiveDepth_get
    if _newclass:adaptiveDepth = _swig_property(_pyrecast.dtObstacleAvoidanceParams_adaptiveDepth_get, _pyrecast.dtObstacleAvoidanceParams_adaptiveDepth_set)
    def __init__(self): 
        this = _pyrecast.new_dtObstacleAvoidanceParams()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtObstacleAvoidanceParams
    __del__ = lambda self : None;
dtObstacleAvoidanceParams_swigregister = _pyrecast.dtObstacleAvoidanceParams_swigregister
dtObstacleAvoidanceParams_swigregister(dtObstacleAvoidanceParams)
DT_MAX_PATTERN_DIVS = cvar.DT_MAX_PATTERN_DIVS
DT_MAX_PATTERN_RINGS = cvar.DT_MAX_PATTERN_RINGS

class dtObstacleAvoidanceQuery(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtObstacleAvoidanceQuery, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtObstacleAvoidanceQuery, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyrecast.new_dtObstacleAvoidanceQuery()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtObstacleAvoidanceQuery
    __del__ = lambda self : None;
    def init(self, *args): return _pyrecast.dtObstacleAvoidanceQuery_init(self, *args)
    def reset(self): return _pyrecast.dtObstacleAvoidanceQuery_reset(self)
    def addCircle(self, *args): return _pyrecast.dtObstacleAvoidanceQuery_addCircle(self, *args)
    def addSegment(self, *args): return _pyrecast.dtObstacleAvoidanceQuery_addSegment(self, *args)
    def sampleVelocityGrid(self, *args): return _pyrecast.dtObstacleAvoidanceQuery_sampleVelocityGrid(self, *args)
    def sampleVelocityAdaptive(self, *args): return _pyrecast.dtObstacleAvoidanceQuery_sampleVelocityAdaptive(self, *args)
    def getObstacleCircleCount(self): return _pyrecast.dtObstacleAvoidanceQuery_getObstacleCircleCount(self)
    def getObstacleCircle(self, *args): return _pyrecast.dtObstacleAvoidanceQuery_getObstacleCircle(self, *args)
    def getObstacleSegmentCount(self): return _pyrecast.dtObstacleAvoidanceQuery_getObstacleSegmentCount(self)
    def getObstacleSegment(self, *args): return _pyrecast.dtObstacleAvoidanceQuery_getObstacleSegment(self, *args)
dtObstacleAvoidanceQuery_swigregister = _pyrecast.dtObstacleAvoidanceQuery_swigregister
dtObstacleAvoidanceQuery_swigregister(dtObstacleAvoidanceQuery)


def dtAllocObstacleAvoidanceQuery():
  return _pyrecast.dtAllocObstacleAvoidanceQuery()
dtAllocObstacleAvoidanceQuery = _pyrecast.dtAllocObstacleAvoidanceQuery

def dtFreeObstacleAvoidanceQuery(*args):
  return _pyrecast.dtFreeObstacleAvoidanceQuery(*args)
dtFreeObstacleAvoidanceQuery = _pyrecast.dtFreeObstacleAvoidanceQuery
class dtPathCorridor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtPathCorridor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtPathCorridor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyrecast.new_dtPathCorridor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtPathCorridor
    __del__ = lambda self : None;
    def init(self, *args): return _pyrecast.dtPathCorridor_init(self, *args)
    def reset(self, *args): return _pyrecast.dtPathCorridor_reset(self, *args)
    def findCorners(self, *args): return _pyrecast.dtPathCorridor_findCorners(self, *args)
    def optimizePathVisibility(self, *args): return _pyrecast.dtPathCorridor_optimizePathVisibility(self, *args)
    def optimizePathTopology(self, *args): return _pyrecast.dtPathCorridor_optimizePathTopology(self, *args)
    def moveOverOffmeshConnection(self, *args): return _pyrecast.dtPathCorridor_moveOverOffmeshConnection(self, *args)
    def fixPathStart(self, *args): return _pyrecast.dtPathCorridor_fixPathStart(self, *args)
    def trimInvalidPath(self, *args): return _pyrecast.dtPathCorridor_trimInvalidPath(self, *args)
    def isValid(self, *args): return _pyrecast.dtPathCorridor_isValid(self, *args)
    def movePosition(self, *args): return _pyrecast.dtPathCorridor_movePosition(self, *args)
    def moveTargetPosition(self, *args): return _pyrecast.dtPathCorridor_moveTargetPosition(self, *args)
    def setCorridor(self, *args): return _pyrecast.dtPathCorridor_setCorridor(self, *args)
    def getPos(self): return _pyrecast.dtPathCorridor_getPos(self)
    def getTarget(self): return _pyrecast.dtPathCorridor_getTarget(self)
    def getFirstPoly(self): return _pyrecast.dtPathCorridor_getFirstPoly(self)
    def getLastPoly(self): return _pyrecast.dtPathCorridor_getLastPoly(self)
    def getPath(self): return _pyrecast.dtPathCorridor_getPath(self)
    def getPathCount(self): return _pyrecast.dtPathCorridor_getPathCount(self)
dtPathCorridor_swigregister = _pyrecast.dtPathCorridor_swigregister
dtPathCorridor_swigregister(dtPathCorridor)


def dtMergeCorridorStartMoved(*args):
  return _pyrecast.dtMergeCorridorStartMoved(*args)
dtMergeCorridorStartMoved = _pyrecast.dtMergeCorridorStartMoved

def dtMergeCorridorEndMoved(*args):
  return _pyrecast.dtMergeCorridorEndMoved(*args)
dtMergeCorridorEndMoved = _pyrecast.dtMergeCorridorEndMoved

def dtMergeCorridorStartShortcut(*args):
  return _pyrecast.dtMergeCorridorStartShortcut(*args)
dtMergeCorridorStartShortcut = _pyrecast.dtMergeCorridorStartShortcut
class dtPathQueue(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtPathQueue, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtPathQueue, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyrecast.new_dtPathQueue()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtPathQueue
    __del__ = lambda self : None;
    def init(self, *args): return _pyrecast.dtPathQueue_init(self, *args)
    def update(self, *args): return _pyrecast.dtPathQueue_update(self, *args)
    def request(self, *args): return _pyrecast.dtPathQueue_request(self, *args)
    def getRequestStatus(self, *args): return _pyrecast.dtPathQueue_getRequestStatus(self, *args)
    def getPathResult(self, *args): return _pyrecast.dtPathQueue_getPathResult(self, *args)
    def getNavQuery(self): return _pyrecast.dtPathQueue_getNavQuery(self)
dtPathQueue_swigregister = _pyrecast.dtPathQueue_swigregister
dtPathQueue_swigregister(dtPathQueue)
DT_PATHQ_INVALID = cvar.DT_PATHQ_INVALID

class dtProximityGrid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dtProximityGrid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dtProximityGrid, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyrecast.new_dtProximityGrid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyrecast.delete_dtProximityGrid
    __del__ = lambda self : None;
    def init(self, *args): return _pyrecast.dtProximityGrid_init(self, *args)
    def clear(self): return _pyrecast.dtProximityGrid_clear(self)
    def addItem(self, *args): return _pyrecast.dtProximityGrid_addItem(self, *args)
    def queryItems(self, *args): return _pyrecast.dtProximityGrid_queryItems(self, *args)
    def getItemCountAt(self, *args): return _pyrecast.dtProximityGrid_getItemCountAt(self, *args)
    def getBounds(self): return _pyrecast.dtProximityGrid_getBounds(self)
    def getCellSize(self): return _pyrecast.dtProximityGrid_getCellSize(self)
dtProximityGrid_swigregister = _pyrecast.dtProximityGrid_swigregister
dtProximityGrid_swigregister(dtProximityGrid)


def dtAllocProximityGrid():
  return _pyrecast.dtAllocProximityGrid()
dtAllocProximityGrid = _pyrecast.dtAllocProximityGrid

def dtFreeProximityGrid(*args):
  return _pyrecast.dtFreeProximityGrid(*args)
dtFreeProximityGrid = _pyrecast.dtFreeProximityGrid

def new_ushortp(*args):
  return _pyrecast.new_ushortp(*args)
new_ushortp = _pyrecast.new_ushortp

def delete_ushortp(*args):
  return _pyrecast.delete_ushortp(*args)
delete_ushortp = _pyrecast.delete_ushortp

def ushortp_getitem(*args):
  return _pyrecast.ushortp_getitem(*args)
ushortp_getitem = _pyrecast.ushortp_getitem

def ushortp_setitem(*args):
  return _pyrecast.ushortp_setitem(*args)
ushortp_setitem = _pyrecast.ushortp_setitem

def new_ucharp(*args):
  return _pyrecast.new_ucharp(*args)
new_ucharp = _pyrecast.new_ucharp

def delete_ucharp(*args):
  return _pyrecast.delete_ucharp(*args)
delete_ucharp = _pyrecast.delete_ucharp

def ucharp_getitem(*args):
  return _pyrecast.ucharp_getitem(*args)
ucharp_getitem = _pyrecast.ucharp_getitem

def ucharp_setitem(*args):
  return _pyrecast.ucharp_setitem(*args)
ucharp_setitem = _pyrecast.ucharp_setitem

def new_uintp(*args):
  return _pyrecast.new_uintp(*args)
new_uintp = _pyrecast.new_uintp

def delete_uintp(*args):
  return _pyrecast.delete_uintp(*args)
delete_uintp = _pyrecast.delete_uintp

def uintp_getitem(*args):
  return _pyrecast.uintp_getitem(*args)
uintp_getitem = _pyrecast.uintp_getitem

def uintp_setitem(*args):
  return _pyrecast.uintp_setitem(*args)
uintp_setitem = _pyrecast.uintp_setitem

def new_intp(*args):
  return _pyrecast.new_intp(*args)
new_intp = _pyrecast.new_intp

def delete_intp(*args):
  return _pyrecast.delete_intp(*args)
delete_intp = _pyrecast.delete_intp

def intp_getitem(*args):
  return _pyrecast.intp_getitem(*args)
intp_getitem = _pyrecast.intp_getitem

def intp_setitem(*args):
  return _pyrecast.intp_setitem(*args)
intp_setitem = _pyrecast.intp_setitem

def new_floatp(*args):
  return _pyrecast.new_floatp(*args)
new_floatp = _pyrecast.new_floatp

def delete_floatp(*args):
  return _pyrecast.delete_floatp(*args)
delete_floatp = _pyrecast.delete_floatp

def floatp_getitem(*args):
  return _pyrecast.floatp_getitem(*args)
floatp_getitem = _pyrecast.floatp_getitem

def floatp_setitem(*args):
  return _pyrecast.floatp_setitem(*args)
floatp_setitem = _pyrecast.floatp_setitem
# This file is compatible with both classic and new-style classes.


